{"version":3,"sources":["dbr.js","components/DetailedResults.js","components/logo.svg","components/SimpleResults.js","components/StaticSettings.js","components/SetUpUI.js","components/BarcodeReader.js","components/ScannerUI.js","components/BarcodeScanner.js","components/SettingsSample.js","App.js","reportWebVitals.js","index.js"],"names":["DBR","BarcodeReader","engineResourcePath","organizationID","DetailedResults","props","messageKeyBase","Modal","show","onHide","toggleHideModal","animation","Header","closeButton","Title","this","modalTitle","Body","className","Card","detailTitles","map","message","index","detailContent","React","Component","SimpleResults","style","div_message","bDecoding","Spinner","Button","width","variant","onClick","showDetails","messages","src","imgData","logo","alt","resize","height","margin","StaticSettings","showSettings","runtimeSettings","settings","JSON","stringify","split","layerCount","_array","i","length","trim","indexOf","arrayValue","push","lastRBrace","pop","substr","setState","prevState","runtimeSettingsArray","usePredefinedSettings","evt","a","target","getAttribute","modeName","updateRuntimeSettings","toggleSettingsString","checked","showString","state","runtimeSettingsString","prevProps","RTSUpdatedCount","textAlign","padding","marginRight","modename","fullFeature","verticalAlign","type","onChange","hide","setting","display","SetUpUI","toggleShowOneDItems","showOneDItems","toggleShowDataBarItems","showDataBarItems","toggleShowPostalCodeItems","showPostalCodeItems","toggleShowFurtherModesItems","showFurtherModesItems","removeRegion","region","newRTS","barcodeFormatsUpdate","barcodeFormatInputs","document","querySelectorAll","nBarcodeFormatIds","parseInt","value","barcodeFormatInput","allBarcodesFormats","updateBarcodeFormatsCheckStatus","barcodeFormatsUpdate2","allBarcodesFormats_2","updateBarcodeFormatsCheckStatus2","test","Math","abs","getElementById","barcodeFormatInputCombos","barcodeFormatInputCombo","barcodeFormatIds","barcodeFormatIds_2","intermediateResultTypesUpdate","elToUpdate","intermediateResultTypesInputs","intermediateResultTypesInput","intermediateResultTypes","usePercentageOrNot","checkBox","reg","parentElement","regionParams","nextSibling","param","placeholder","updateRangeValue","updateSettings","updateRange","previousSibling","RTS","allInputs","allSelects","_regionItems","_key","hasOwnProperty","_setting","_settingID","_value","_item","lastIndexOf","keys","key","_regions","Array","j","o","subIDs","furtherModes","getModeArgument","children","_ele","sMAElements","tagName","toLowerCase","lastChild","_input","slice","concat","ex","console","error","setModeArguments","setModeArgument","id","title","href","rel","original-title","viewBox","xmlns","fill","d","paddingTop","htmlFor","defaultValue","defaultChecked","marginTop","terminatePhase","min","max","step","barcodeZoneMinDistanceToImageBorders","factor","onKeyUp","deblurLevel","expectedBarcodesCount","maxAlgorithmThreadCount","minBarcodeTextLength","minResultConfidence","pdfRasterDPI","readOnly","scaleDownThreshold","timeout","toString","regionMeasuredByPercentage","regionTop","regionLeft","regionRight","regionBottom","returnBarcodeZoneClarity","pdfReadingMode","resultCoordinateType","binarizationModes","data-id","deblurModes","localizationModes","scaleUpModes","textResultOrderModes","borderTop","barcodeColourModes","barcodeComplementModes","colourClusteringModes","colourConversionModes","deformationResistingModes","dpmCodeReadingModes","grayscaleTransformationModes","imagePreprocessingModes","regionPredetectionModes","textFilterModes","textureDetectionModes","Footer","handleClose","renderSwitch","modalTile","onFileSelected","event","setImageData","input","emptyMessages","appendAMessage","startTime","Date","getTime","reader","createInstance","bSaveOriCanvas","files","file","name","setDecodeState","decode","results","endTime","timeElapsed","result","barcodeText","appendDetails","barcodeFormatString","barcodeFormatString_2","barcodeBytes","btoa","tempLocalizationResult","localizationResult","angle","moduleSize","confidence","documentName","pageNumber","regionName","_type","x1","y1","x2","y2","x3","y3","x4","y4","extendedResults","k","bytes","clarity","deformation","resultType","detailedResult","oneDCodeDetails","checkDigitBytes","startCharsBytes","stopCharsBytes","pDF417Details","Columns","rows","errorCorrectionLevel","qRCodeDetails","Version","Model","dataMatrixDetails","columns","dataRegionNumber","dataRegionColumns","dataRegionRows","aztecDetails","layerNumber","oriCanvas","toDataURL","bStart","data","paras","alert","argumentName","log","_rts","showCurrentSettings","bShow","bShowModalDialog","setUpRuntimeSettings","getRuntimeSettings","_runtimeSettings","runtimeSettings_str","outputSettingsToString","showStaticRuntimeSettings","str","bImportant","_values","libLoaded","modeArgumentString","_bUseFullFeature","loadWasm","destroy","size","multiple","accept","fontSize","BarcodeScanner","elRef","createRef","scanner","setUIElement","current","onFrameRead","appendMessage","open","ref","playsInline","showScanner","bShowScanner","hideScanner","resultValue","bDestroyed","_","SettingsSample","handleCheckBoxChange","useAdvanced","sampleStarted","instanceType","Badge","InputGroup","minWidth","Prepend","Checkbox","aria-label","FormControl","block","createAnInstance","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.79b78336.chunk.js","sourcesContent":["import DBR from \"dynamsoft-javascript-barcode\";\r\nDBR.BarcodeReader.engineResourcePath = \"https://cdn.jsdelivr.net/npm/dynamsoft-javascript-barcode@8.2.3/dist/\";\r\n// Please visit https://www.dynamsoft.com/customer/license/trialLicense to get a trial license\r\nDBR.BarcodeReader.organizationID = \"100448235\";\r\n// DBR.BarcodeReader.productKeys = \"t0077xQAAAEOf0RjyWar4Q48NrAu7iX4j+Ivl3iqpsR2Mf3W9gf/HMgalcntdpSMel3xw/Mze/z8dpY0eCdkvUxN6+brx+xrzZh4+AWkFKn4=\";\r\n// DBR.BarcodeReader._bUseFullFeature = true; // Control of loading min wasm or full wasm.\r\nexport default DBR;","\r\nimport React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Modal, Card } from 'react-bootstrap';\r\n\r\nclass DetailedResults extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.messageKeyBase = 200000;\r\n    }\r\n    render() {\r\n        return (\r\n            //Why animation={false}: https://github.com/react-bootstrap/react-bootstrap/issues/5075\r\n            <Modal show={true} onHide={() => { this.props.toggleHideModal(false) }} animation={false}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>{this.props.modalTitle}</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body className={\"overFlowX\"}>\r\n                    <Card className=\"paddingOneVW\">\r\n                        {this.props.detailTitles.map((message, index) =>\r\n                            <p className='compact_P' key={this.messageKeyBase + index}>\r\n                                <span>\r\n                                    {message}\r\n                                </span>\r\n                                <strong className=\"dsColor\">\r\n                                    {this.props.detailContent[index]}\r\n                                </strong>\r\n                            </p>\r\n                        )}\r\n                    </Card>\r\n                </Modal.Body>\r\n            </Modal>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DetailedResults;\r\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","\r\nimport React from 'react';\r\nimport logo from './logo.svg';\r\nimport { Button, Spinner } from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nclass SimpleResults extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.messageKeyBase = 400000;\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"div-message\" style={style.div_message}>\r\n                <div className=\"main thinBorder\">\r\n                    {this.props.bDecoding ? (<Spinner animation=\"border\" />) :\r\n                        (<Button style={{ width: \"80%\" }} variant=\"primary\" onClick={this.props.showDetails}>Show Details</Button>)\r\n                    }\r\n                    {\r\n                        this.props.messages.map((message, index) =>\r\n                            <p className='compact_P' key={this.messageKeyBase + index}>\r\n                                {message}\r\n                            </p>\r\n                        )\r\n                    }\r\n                </div>\r\n                <div className=\"main thinBorder\">\r\n                    <img src={this.props.imgData === null ? logo : this.props.imgData} className={this.props.imgData === null ? \"left maxFullWidth logo\" : \"left maxFullWidth thinBorder\"} alt=\"Place Holder\" />\r\n                </div>\r\n            </div >\r\n        );\r\n    }\r\n}\r\nconst style = {\r\n    div_message: {\r\n        resize: \"both\",\r\n        width: \"90vw\",\r\n        height: \"60vw\",\r\n        margin: \"0 auto\"\r\n    },\r\n}\r\nexport default SimpleResults;\r\n","\r\nimport React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Modal, Card, Button } from 'react-bootstrap';\r\n\r\nclass StaticSettings extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.messageKeyBase = 100000;\r\n        this.state = {\r\n            runtimeSettingsString: \"\",\r\n            runtimeSettingsArray: [],\r\n            showString: false,\r\n        };\r\n    }\r\n    componentDidUpdate(prevProps) {\r\n        // Typical usage (don't forget to compare props):\r\n        if (this.props.RTSUpdatedCount !== prevProps.RTSUpdatedCount) {\r\n            this.showSettings();\r\n        }\r\n    }\r\n    showSettings = () => {\r\n        if (this.props.runtimeSettings === null) return;\r\n        let settings = JSON.stringify(this.props.runtimeSettings, null, 5).split('     ');\r\n        let layerCount = 0, _array = [];\r\n        for (let i = 0; i < settings.length; i++) {\r\n            if (settings[i].trim() === \"\")\r\n                i++;\r\n            if (settings[i].indexOf(\"[\") > -1) {\r\n                let arrayValue = settings[i];\r\n                do {\r\n                    i++;\r\n                    arrayValue += settings[i]\r\n                } while (settings[i].indexOf(\"]\") < 0)\r\n                _array.push(['_' + layerCount, arrayValue]);\r\n            } else {\r\n                if (settings[i].indexOf(\"}\") === 0) {\r\n                    _array.push(['_' + (layerCount - 1), settings[i]]);\r\n                } else {\r\n                    _array.push(['_' + layerCount, settings[i]]);\r\n                }\r\n            }\r\n            if (settings[i].indexOf(\"{\") > -1)\r\n                layerCount++;\r\n            if (settings[i].indexOf(\"}\") > -1) {\r\n                layerCount--;\r\n                if (layerCount === 0 && settings[i].indexOf(\"}\") === settings[i].length - 1) {\r\n                    let lastRBrace = _array.pop();\r\n                    lastRBrace = lastRBrace[1];\r\n                    _array.push(['_' + (layerCount + 1), (lastRBrace.substr(0, lastRBrace.length - 1))]);\r\n                    _array.push(['_' + layerCount, \"}\"]);\r\n                }\r\n            }\r\n        }\r\n        this.setState(prevState => ({\r\n            runtimeSettingsArray: _array\r\n        }));\r\n    }\r\n    usePredefinedSettings = async evt => {\r\n        if (evt && evt.target && evt.target.getAttribute(\"modename\")) {\r\n            let modeName = evt.target.getAttribute(\"modename\");\r\n            this.props.updateRuntimeSettings(modeName);\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            //Why animation={false}: https://github.com/react-bootstrap/react-bootstrap/issues/5075\r\n            <Modal show={true} onHide={() => { this.props.toggleHideModal(false) }} animation={false}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>{this.props.modalTitle}</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body className={\"overFlowX\"}>\r\n                    <div style={{ textAlign: \"center\", padding: \"1vw\" }}>\r\n                        <p>Use A Built-in Template</p>\r\n                        <Button variant=\"secondary\" style={{ width: \"30%\", marginRight: \"2%\" }} modename=\"speed\" onClick={this.usePredefinedSettings}>Speed</Button>\r\n                        <Button variant=\"secondary\" style={{ width: \"30%\", marginRight: \"2%\" }} modename=\"balance\" onClick={this.usePredefinedSettings}>Balance</Button>\r\n                        <Button variant=\"secondary\" style={{ width: \"30%\" }} modename=\"coverage\" onClick={this.usePredefinedSettings}>Coverage</Button>\r\n                    </div>\r\n                    {this.props.fullFeature ?\r\n                        (<><input style={{ verticalAlign: 'baseline' }} type=\"checkbox\" onChange={this.toggleSettingsString} /> Show String</>)\r\n                        : \"\"}\r\n                    <Card className=\"paddingOneVW\" style={this.state.showString ? style.hide : style.show}>\r\n                        {this.state.runtimeSettingsArray.map((setting, index) =>\r\n                            <p className={'compact_P runTimeSettings_P' + setting[0]} key={this.messageKeyBase + index} >\r\n                                {setting[1]}\r\n                            </p >\r\n                        )}\r\n                    </Card>\r\n                    <Card className=\"paddingOneVW\" style={this.state.showString ? style.show : style.hide}>\r\n                        <pre>{this.props.runtimeSettingsString}</pre>\r\n                    </Card>\r\n                </Modal.Body>\r\n            </Modal>\r\n        );\r\n    }\r\n    toggleSettingsString = evt => {\r\n        if (evt.target.checked) {\r\n            this.setState({\r\n                showString: true\r\n            });\r\n        } else {\r\n            this.setState({\r\n                showString: false\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nconst style = {\r\n    hide: {\r\n        display: \"none\"\r\n    },\r\n    show: {\r\n        display: \"block\"\r\n    }\r\n}\r\nexport default StaticSettings;\r\n","\r\nimport React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './SetUpUI.css'\r\nimport { Modal, Card, Button } from 'react-bootstrap';\r\n\r\nclass SetUpUI extends React.Component {\r\n    /* Updated for 8.2 of DBR JS */\r\n    constructor(props) {\r\n        super(props);\r\n        this.messageKeyBase = 300000;\r\n        this.allBarcodesFormats = 4263510015;//-31457281;\r\n        this.allBarcodesFormats_2 = 32505859;\r\n\r\n        this.state = {\r\n            showOneDItems: false,\r\n            showDataBarItems: false,\r\n            showPostalCodeItems: false,\r\n            showFurtherModesItems: false\r\n        };\r\n    }\r\n    usePredefinedSettings = async evt => {\r\n        if (evt && evt.target && evt.target.getAttribute(\"modename\")) {\r\n            let modeName = evt.target.getAttribute(\"modename\");\r\n            this.props.updateRuntimeSettings(modeName);\r\n        }\r\n    }\r\n    toggleShowOneDItems = () => {\r\n        this.setState(prevState => ({ showOneDItems: !prevState.showOneDItems }));\r\n    }\r\n    toggleShowDataBarItems = () => {\r\n        this.setState(prevState => ({ showDataBarItems: !prevState.showDataBarItems }));\r\n    }\r\n    toggleShowPostalCodeItems = () => {\r\n        this.setState(prevState => ({ showPostalCodeItems: !prevState.showPostalCodeItems }));\r\n    }\r\n    toggleShowFurtherModesItems = () => {\r\n        this.setState(prevState => ({ showFurtherModesItems: !prevState.showFurtherModesItems }));\r\n    }\r\n    removeRegion = evt => {\r\n        if (this.props.runtimeSettings.region.length && this.props.runtimeSettings.region.length > 1) {\r\n            let newRTS = this.props.runtimeSettings;\r\n            newRTS.region.pop();\r\n            this.props.updateRuntimeSettings(newRTS);\r\n        }\r\n    }\r\n    barcodeFormatsUpdate = evt => {\r\n        let barcodeFormatInputs = document.querySelectorAll('.ipt-barcodeFormat');\r\n        let nBarcodeFormatIds = 0;\r\n        if (evt.target.checked)\r\n            nBarcodeFormatIds = parseInt(evt.target.value);\r\n        for (let i = 0; i < barcodeFormatInputs.length; i++) {\r\n            let barcodeFormatInput = barcodeFormatInputs[i];\r\n            if (barcodeFormatInput.checked && (parseInt(barcodeFormatInput.value) & nBarcodeFormatIds) === 0)\r\n                nBarcodeFormatIds += parseInt(barcodeFormatInput.value);\r\n        }\r\n        if (!evt.target.checked)\r\n            nBarcodeFormatIds = (this.allBarcodesFormats - parseInt(evt.target.value)) & nBarcodeFormatIds;\r\n        this.updateBarcodeFormatsCheckStatus(nBarcodeFormatIds);\r\n    }\r\n    barcodeFormatsUpdate2 = evt => {\r\n        let barcodeFormatInputs = document.querySelectorAll('.ipt-barcodeFormat2');\r\n        let nBarcodeFormatIds = 0;\r\n        if (evt.target.checked)\r\n            nBarcodeFormatIds = parseInt(evt.target.value);\r\n        for (let i = 0; i < barcodeFormatInputs.length; i++) {\r\n            let barcodeFormatInput = barcodeFormatInputs[i];\r\n            if (barcodeFormatInput.checked && (parseInt(barcodeFormatInput.value) & nBarcodeFormatIds) === 0)\r\n                nBarcodeFormatIds += parseInt(barcodeFormatInput.value);\r\n        }\r\n        if (!evt.target.checked)\r\n            nBarcodeFormatIds = (this.allBarcodesFormats_2 - parseInt(evt.target.value)) & nBarcodeFormatIds;\r\n        if (parseInt(evt.target.value) === 0) {\r\n            if (evt.target.checked)\r\n                nBarcodeFormatIds = 0;\r\n            else\r\n                nBarcodeFormatIds = this.allBarcodesFormats_2;\r\n        }\r\n        this.updateBarcodeFormatsCheckStatus2(nBarcodeFormatIds);\r\n    }\r\n    updateBarcodeFormatsCheckStatus = nBarcodeFormatIds => {\r\n        if (typeof (nBarcodeFormatIds) != \"number\") {\r\n            if (nBarcodeFormatIds.target) {\r\n                var reg = /^\\d+$/;\r\n                let evt = nBarcodeFormatIds;\r\n                if (evt.target.value === \"-\")\r\n                    nBarcodeFormatIds = 0;\r\n                else {\r\n                    if (!reg.test(Math.abs(evt.target.value)))\r\n                        evt.target.value = evt.target.getAttribute('value');\r\n                    nBarcodeFormatIds = parseInt(evt.target.value);\r\n                }\r\n            } else {\r\n                return;\r\n            }\r\n        } else {\r\n            document.getElementById(\"ipt-runtimesettings-barcodeFormatIds\").value = nBarcodeFormatIds;\r\n        }\r\n        let barcodeFormatInputs = document.querySelectorAll('.ipt-barcodeFormat');\r\n        let barcodeFormatInputCombos = document.querySelectorAll('.ipt-barcodeFormat-combo');\r\n        for (let i = 0; i < barcodeFormatInputCombos.length; i++) {\r\n            let barcodeFormatInputCombo = barcodeFormatInputCombos[i];\r\n            if (parseInt(barcodeFormatInputCombo.value) === (parseInt(barcodeFormatInputCombo.value) & nBarcodeFormatIds))\r\n                barcodeFormatInputCombo.checked = true;\r\n            else\r\n                barcodeFormatInputCombo.checked = false;\r\n        }\r\n        for (let i = 0; i < barcodeFormatInputs.length; i++) {\r\n            let barcodeFormatInput = barcodeFormatInputs[i];\r\n            barcodeFormatInput.checked = false;\r\n            if (nBarcodeFormatIds & parseInt(barcodeFormatInput.value))\r\n                barcodeFormatInput.checked = true;\r\n        }\r\n        let newRTS = this.props.runtimeSettings;\r\n        newRTS.barcodeFormatIds = nBarcodeFormatIds;\r\n        this.props.updateRuntimeSettings(newRTS);\r\n    }\r\n    updateBarcodeFormatsCheckStatus2 = nBarcodeFormatIds => {\r\n        if (typeof (nBarcodeFormatIds) != \"number\") {\r\n            if (nBarcodeFormatIds.target) {\r\n                var reg = /^\\d+$/;\r\n                let evt = nBarcodeFormatIds;\r\n                if (!reg.test(evt.target.value))\r\n                    evt.target.value = evt.target.getAttribute('value');\r\n                nBarcodeFormatIds = evt.target.value;\r\n            } else {\r\n                return;\r\n            }\r\n        }\r\n        if (nBarcodeFormatIds === 0)\r\n            document.getElementById('null-barcodeFormatIds_2').checked = true;\r\n        else\r\n            document.getElementById('null-barcodeFormatIds_2').checked = false;\r\n        let barcodeFormatInputs = document.querySelectorAll('.ipt-barcodeFormat2');\r\n        let barcodeFormatInputCombos = document.querySelectorAll('.ipt-barcodeFormat-combo2');\r\n        for (let i = 0; i < barcodeFormatInputCombos.length; i++) {\r\n            let barcodeFormatInputCombo = barcodeFormatInputCombos[i];\r\n            if (parseInt(barcodeFormatInputCombo.value) === (parseInt(barcodeFormatInputCombo.value) & nBarcodeFormatIds))\r\n                barcodeFormatInputCombo.checked = true;\r\n            else\r\n                barcodeFormatInputCombo.checked = false;\r\n        }\r\n\r\n        document.getElementById('ipt-runtimesettings-barcodeFormatIds_2').value = nBarcodeFormatIds;\r\n        for (let i = 0; i < barcodeFormatInputs.length; i++) {\r\n            let barcodeFormatInput = barcodeFormatInputs[i];\r\n            barcodeFormatInput.checked = false;\r\n            if (nBarcodeFormatIds & parseInt(barcodeFormatInput.value))\r\n                barcodeFormatInput.checked = true;\r\n        }\r\n        let newRTS = this.props.runtimeSettings;\r\n        newRTS.barcodeFormatIds_2 = nBarcodeFormatIds;\r\n        this.props.updateRuntimeSettings(newRTS);\r\n    }\r\n    intermediateResultTypesUpdate = evt => {\r\n        let elToUpdate = document.getElementById('ipt-runtimesettings-intermediateResultTypes');\r\n        if (evt.target.getAttribute('id') !== \"ipt-runtimesettings-intermediateResultTypes\") {\r\n            if (evt.target.checked)\r\n                elToUpdate.value = parseInt(elToUpdate.value) + parseInt(evt.target.value);\r\n            else\r\n                elToUpdate.value = parseInt(elToUpdate.value) - parseInt(evt.target.value);\r\n        } else {\r\n            let intermediateResultTypesInputs = document.querySelectorAll('.ipt-updateIntermediateResultTypes');\r\n            for (let i = 0; i < intermediateResultTypesInputs.length; i++) {\r\n                let intermediateResultTypesInput = intermediateResultTypesInputs[i];\r\n                intermediateResultTypesInput.checked = elToUpdate.value & parseInt(intermediateResultTypesInput.value);\r\n            }\r\n        }\r\n        let newRTS = this.props.runtimeSettings;\r\n        newRTS.intermediateResultTypes = parseInt(elToUpdate.value);\r\n        this.props.updateRuntimeSettings(newRTS);\r\n    }\r\n    usePercentageOrNot = async evt => {\r\n        let checkBox = evt.target;\r\n        let reg = /^\\d+$/;\r\n        let parentElement = checkBox.parentElement;\r\n        let regionParams = [];\r\n        regionParams.push(parentElement.nextSibling);\r\n        regionParams.push(parentElement.nextSibling.nextSibling);\r\n        regionParams.push(parentElement.nextSibling.nextSibling.nextSibling);\r\n        regionParams.push(parentElement.nextSibling.nextSibling.nextSibling.nextSibling);\r\n        if (checkBox.checked) {\r\n            for (let param of regionParams) {\r\n                if (param.getAttribute(\"placeholder\").indexOf(\"%\") === -1)\r\n                    param.placeholder = param.getAttribute(\"placeholder\") + \"(%)\";\r\n                if (reg.test(param.value)) { // Confirming it is a positive number\r\n                    if (parseInt(param.value) > 100)\r\n                        param.value = 100;\r\n                } else { // If not a number, set it to 0\r\n                    param.value = param.value === \"\" ? \"\" : 0;\r\n                }\r\n            }\r\n        } else {\r\n            for (let param of regionParams) {\r\n                if (param.getAttribute(\"placeholder\").indexOf(\"%\") !== -1)\r\n                    param.placeholder = param.getAttribute(\"placeholder\").substr(0, param.getAttribute(\"placeholder\").length - 3);\r\n                if (reg.test(param.value)) { // Confirming it is a positive number\r\n                    if (parseInt(param.value) > 10000)\r\n                        param.value = 10000;\r\n                } else { // If not a number, set it to 0\r\n                    param.value = param.value === \"\" ? \"\" : 0;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    updateRangeValue = evt => {\r\n        evt.target.nextSibling.value = parseInt(evt.target.value) * parseInt(evt.target.getAttribute('factor'));\r\n        this.updateSettings();\r\n    }\r\n    updateRange = evt => {\r\n        var reg = /^\\d+$/;\r\n        if (!reg.test(evt.target.value))\r\n            evt.target.value = evt.target.getAttribute('value');\r\n        if (evt.target.value > parseInt(evt.target.getAttribute('max')))\r\n            evt.target.value = evt.target.getAttribute('max');\r\n        evt.target.previousSibling.value = parseInt(parseInt(evt.target.value) / parseInt(evt.target.getAttribute('factor')));\r\n        this.updateSettings();\r\n    }\r\n    updateSettings = () => {\r\n        let RTS = this.props.runtimeSettings;\r\n        let allInputs = document.querySelectorAll('input');\r\n        let allSelects = document.querySelectorAll('select');\r\n        let _regionItems = [];\r\n        for (let _key in allInputs) {\r\n            if (allInputs.hasOwnProperty(_key)) {\r\n                let _setting = allInputs[_key];\r\n                let _settingID = \"\", _value = 0;\r\n                if (_setting.getAttribute && (_settingID = _setting.getAttribute('id'))) {\r\n                    if (_settingID.indexOf('ipt-runtimesettings-') !== -1) {\r\n                        let _item = _settingID.substr(_settingID.lastIndexOf(\"-\") + 1)\r\n                        if (_setting.value === \"\")\r\n                            _value = 0;\r\n                        else\r\n                            _value = parseInt(_setting.value);\r\n                        if (_item.indexOf('region') !== -1) {\r\n                            let keys = _item.split(\"_\");\r\n                            if (keys[0] === \"regionMeasuredByPercentage\")\r\n                                _value = _setting.checked ? 1 : 0;\r\n                            _regionItems.push({ key: keys[0], index: keys[1] - 1, value: _value });\r\n                        } else {\r\n                            RTS[_item] = parseInt(_value);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        let _regions = new Array(parseInt(_regionItems.length / 5));\r\n        for (let j = 0; j < _regions.length; j++) {\r\n            _regions[j] = {};\r\n        }\r\n        for (let o of _regionItems) {\r\n            let _region = _regions[o.index];\r\n            _region[o.key] = o.value;\r\n        }\r\n        _regions.length === 1 ? RTS[\"region\"] = _regions[0] : RTS[\"region\"] = _regions;\r\n        for (let _key in allSelects) {\r\n            if (allSelects.hasOwnProperty(_key)) {\r\n                let _setting = allSelects[_key];\r\n                let _value = parseInt(_setting.value);\r\n                let _settingID = \"\";\r\n                if (_setting.getAttribute && (_settingID = _setting.getAttribute('id'))) {\r\n                    if (_settingID.indexOf(\"_\") !== -1) {\r\n                        let subIDs = _settingID.split(\"_\");\r\n                        switch (subIDs[0]) {\r\n                            // case \"intermediateResultSavingMode\":\r\n                            case \"terminatePhase\":\r\n                            case \"pdfReadingMode\":\r\n                            case \"resultCoordinateType\":\r\n                                //case \"textAssistedCorrectionMode\":\r\n                                RTS[subIDs[0]] = _value;\r\n                                break;\r\n\r\n                            case \"binarizationModes\":\r\n                            case \"deblurModes\":\r\n                            case \"localizationModes\":\r\n                            case \"scaleUpModes\":\r\n                            case \"textResultOrderModes\":\r\n                                RTS[subIDs[0]][parseInt(subIDs[1]) - 1] = _value;\r\n                                break;\r\n                            //case \"accompanyingTextRecognitionModes\":\r\n                            case \"barcodeColourModes\":\r\n                            case \"barcodeComplementModes\":\r\n                            case \"colourClusteringModes\":\r\n                            case \"colourConversionModes\":\r\n                            case \"deformationResistingModes\":\r\n                            case \"dpmCodeReadingModes\":\r\n                            case \"grayscaleTransformationModes\":\r\n                            case \"imagePreprocessingModes\":\r\n                            case \"regionPredetectionModes\":\r\n                            case \"textFilterModes\":\r\n                            case \"textureDetectionModes\":\r\n                                RTS.furtherModes[subIDs[0]][parseInt(subIDs[1]) - 1] = _value;\r\n                                break;\r\n                            default: break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.props.updateRuntimeSettings(RTS);\r\n    }\r\n    getModeArgument = async (evt) => {\r\n        try {\r\n            if (evt && evt.target && evt.target.parentElement && evt.target.parentElement.children) {\r\n                let sMAElements = evt.target.parentElement.children;\r\n                for (let _ele in sMAElements) {\r\n                    if (sMAElements[_ele].tagName && sMAElements[_ele].tagName.toLowerCase() === \"div\" && sMAElements[_ele].lastChild.tagName && sMAElements[_ele].lastChild.tagName.toLowerCase() === \"input\") {\r\n                        let _input = sMAElements[_ele].lastChild, value = null;\r\n                        this.props.getModeArgument(_input.getAttribute(\"data-id\").split(\"-\").slice(1).concat([value]));\r\n                    }\r\n                }\r\n            }\r\n        } catch (ex) {\r\n            console.error(ex);\r\n        }\r\n    }\r\n    setModeArguments = async (evt) => {\r\n        try {\r\n            if (evt && evt.target && evt.target.parentElement && evt.target.parentElement.children) {\r\n                let sMAElements = evt.target.parentElement.children;\r\n                for (let _ele in sMAElements) {\r\n                    if (sMAElements[_ele].tagName && sMAElements[_ele].tagName.toLowerCase() === \"div\" && sMAElements[_ele].lastChild.tagName && sMAElements[_ele].lastChild.tagName.toLowerCase() === \"input\") {\r\n                        let _input = sMAElements[_ele].lastChild;\r\n                        this.props.setModeArgument(_input.getAttribute(\"data-id\").split(\"-\").slice(1).concat([_input.value]));\r\n                    }\r\n                }\r\n            }\r\n        } catch (ex) {\r\n            console.error(ex);\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            //Why animation={false}: https://github.com/react-bootstrap/react-bootstrap/issues/5075\r\n            <Modal show={true} onHide={() => { this.props.toggleHideModal(false) }} animation={false}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>{this.props.modalTitle}</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body className={\"overFlowX noPadding\"}>\r\n                    <div id=\"div-settingsModule\" key={this.props.RTSUpdatedCount} className=\"div-settingsModule\">\r\n                        <div className=\"div-advanceSettingsHeader\">\r\n                            <a title=\"Check Documentation\" href=\"https://www.dynamsoft.com/barcode-reader/programming/javascript/api-reference/global-interfaces.html?ver=latest#runtimesettings\" target=\"_blank\" rel=\"noopener noreferrer\" original-title=\"document\">\r\n                                <svg width=\"16\" height=\"16\" viewBox=\"0 0 1792 1792\" xmlns=\"http://www.w3.org/2000/svg\"><path fill=\"#fe8e14\" d=\"M1703 478q40 57 18 129l-275 906q-19 64-76.5 107.5t-122.5 43.5h-923q-77 0-148.5-53.5t-99.5-131.5q-24-67-2-127 0-4 3-27t4-37q1-8-3-21.5t-3-19.5q2-11 8-21t16.5-23.5 16.5-23.5q23-38 45-91.5t30-91.5q3-10 .5-30t-.5-28q3-11 17-28t17-23q21-36 42-92t25-90q1-9-2.5-32t.5-28q4-13 22-30.5t22-22.5q19-26 42.5-84.5t27.5-96.5q1-8-3-25.5t-2-26.5q2-8 9-18t18-23 17-21q8-12 16.5-30.5t15-35 16-36 19.5-32 26.5-23.5 36-11.5 47.5 5.5l-1 3q38-9 51-9h761q74 0 114 56t18 130l-274 906q-36 119-71.5 153.5t-128.5 34.5h-869q-27 0-38 15-11 16-1 43 24 70 144 70h923q29 0 56-15.5t35-41.5l300-987q7-22 5-57 38 15 59 43zm-1064 2q-4 13 2 22.5t20 9.5h608q13 0 25.5-9.5t16.5-22.5l21-64q4-13-2-22.5t-20-9.5h-608q-13 0-25.5 9.5t-16.5 22.5zm-83 256q-4 13 2 22.5t20 9.5h608q13 0 25.5-9.5t16.5-22.5l21-64q4-13-2-22.5t-20-9.5h-608q-13 0-25.5 9.5t-16.5 22.5z\"></path></svg>\r\n                            </a>\r\n                        </div>\r\n                        <div style={{ textAlign: \"center\", paddingTop: \"1vw\" }}>\r\n                            <p>Use A Built-in Template</p>\r\n                            <Button variant=\"secondary\" style={{ width: \"30%\", marginRight: \"2%\" }} modename=\"speed\" onClick={this.usePredefinedSettings}>Speed</Button>\r\n                            <Button variant=\"secondary\" style={{ width: \"30%\", marginRight: \"2%\" }} modename=\"balance\" onClick={this.usePredefinedSettings}>Balance</Button>\r\n                            <Button variant=\"secondary\" style={{ width: \"30%\" }} modename=\"coverage\" onClick={this.usePredefinedSettings}>Coverage</Button>\r\n                        </div>\r\n                        <div id=\"div-advanceSettings\" className=\"div-advanceSettings div-runtimesettings-details-container\">\r\n                            <Card style={{ padding: '1vw' }} id=\"div-barcodeFormatContainer\" className=\"div-barcodeFormatContainer\">\r\n                                <Card.Title style={{ width: '100%' }}>Choose Formats</Card.Title>\r\n                                <label htmlFor=\"ipt-runtimesettings-barcodeFormatIds\">Barcode Formats</label>\r\n                                <input id=\"ipt-runtimesettings-barcodeFormatIds\" onChange={this.updateBarcodeFormatsCheckStatus} type=\"knumber\" defaultValue={this.props.runtimeSettings.barcodeFormatIds} />\r\n                                <div className=\"div-1dFormat\">\r\n                                    <label><input type=\"checkbox\" className=\"ipt-barcodeFormat-combo\" onClick={this.barcodeFormatsUpdate} defaultChecked={(this.props.runtimeSettings.barcodeFormatIds & 0x001007FF) === 0x001007FF} defaultValue=\"0x001007FF\" id=\"ipt-1dFormat\" />1D</label>\r\n                                    <Button variant=\"Light\" id=\"btn-toggle1Ds\" className=\"btn-toggle\" onClick={this.toggleShowOneDItems} ></Button>\r\n                                </div>\r\n                                <Card id=\"div-1dFormatContainer\" className=\"div-1dFormatContainer\" style={this.state.showOneDItems ? style.show : style.hide}>\r\n                                    <label><input type=\"checkbox\" onClick={this.barcodeFormatsUpdate} defaultValue=\"1\" className=\"ipt-barcodeFormat\" defaultChecked={(this.props.runtimeSettings.barcodeFormatIds & 1) === 1} />CODE 39</label>\r\n                                    <label><input type=\"checkbox\" onClick={this.barcodeFormatsUpdate} defaultValue=\"2\" className=\"ipt-barcodeFormat\" defaultChecked={(this.props.runtimeSettings.barcodeFormatIds & 2) === 2} />CODE 128</label>\r\n                                    <label><input type=\"checkbox\" onClick={this.barcodeFormatsUpdate} defaultValue=\"4\" className=\"ipt-barcodeFormat\" defaultChecked={(this.props.runtimeSettings.barcodeFormatIds & 4) === 4} />CODE 93</label>\r\n                                    <label><input type=\"checkbox\" onClick={this.barcodeFormatsUpdate} defaultValue=\"8\" className=\"ipt-barcodeFormat\" defaultChecked={(this.props.runtimeSettings.barcodeFormatIds & 8) === 8} />CODABAR</label>\r\n                                    <label><input type=\"checkbox\" onClick={this.barcodeFormatsUpdate} defaultValue=\"0x10\" className=\"ipt-barcodeFormat\" defaultChecked={(this.props.runtimeSettings.barcodeFormatIds & 0x10) === 0x10} />ITF</label>\r\n                                    <label><input type=\"checkbox\" onClick={this.barcodeFormatsUpdate} defaultValue=\"0x20\" className=\"ipt-barcodeFormat\" defaultChecked={(this.props.runtimeSettings.barcodeFormatIds & 0x20) === 0x20} />EAN 13</label>\r\n                                    <label><input type=\"checkbox\" onClick={this.barcodeFormatsUpdate} defaultValue=\"0x40\" className=\"ipt-barcodeFormat\" defaultChecked={(this.props.runtimeSettings.barcodeFormatIds & 0x40) === 0x40} />EAN 8</label>\r\n                                    <label><input type=\"checkbox\" onClick={this.barcodeFormatsUpdate} defaultValue=\"0x80\" className=\"ipt-barcodeFormat\" defaultChecked={(this.props.runtimeSettings.barcodeFormatIds & 0x80) === 0x80} />UPC A</label>\r\n                                    <label><input type=\"checkbox\" onClick={this.barcodeFormatsUpdate} defaultValue=\"0x100\" className=\"ipt-barcodeFormat\" defaultChecked={(this.props.runtimeSettings.barcodeFormatIds & 0x100) === 0x100} />UPC E</label>\r\n                                    <label><input type=\"checkbox\" onClick={this.barcodeFormatsUpdate} defaultValue=\"0x200\" className=\"ipt-barcodeFormat\" defaultChecked={(this.props.runtimeSettings.barcodeFormatIds & 0x200) === 0x200} />INDUSTRIAL 25</label>\r\n                                    <label><input type=\"checkbox\" onClick={this.barcodeFormatsUpdate} defaultValue=\"0x400\" className=\"ipt-barcodeFormat\" defaultChecked={(this.props.runtimeSettings.barcodeFormatIds & 0x400) === 0x400} />CODE 39 EXTENDED</label>\r\n                                    <label><input type=\"checkbox\" onClick={this.barcodeFormatsUpdate} defaultValue=\"0x100000\" className=\"ipt-barcodeFormat\" defaultChecked={(this.props.runtimeSettings.barcodeFormatIds & 0x100000) === 0x100000} />MSI Code</label>\r\n                                </Card>\r\n\r\n                                <div className=\"div-GS1DatabarFormat\">\r\n                                    <label><input type=\"checkbox\" onClick={this.barcodeFormatsUpdate} className=\"ipt-barcodeFormat-combo\" defaultChecked={(this.props.runtimeSettings.barcodeFormatIds & 0x0003F800) === 0x0003F800} defaultValue=\"0x0003F800\" id=\"ipt-GS1DatabarFormat\" />GS1 Databar</label>\r\n                                    <Button variant=\"Light\" id=\"btn-toggleGS1Databars\" className=\"btn-toggle\" onClick={this.toggleShowDataBarItems}></Button>\r\n                                </div>\r\n                                <Card id=\"div-GS1DatabarFormatContainer\" className=\"div-GS1DatabarFormatContainer\" style={this.state.showDataBarItems ? style.show : style.hide}>\r\n                                    <label><input type=\"checkbox\" onClick={this.barcodeFormatsUpdate} defaultValue=\"0x800\" className=\"ipt-barcodeFormat\" defaultChecked={(this.props.runtimeSettings.barcodeFormatIds & 0x800) === 0x800} />GS1 DATABAR OMNIDIRECTIONAL</label>\r\n                                    <label><input type=\"checkbox\" onClick={this.barcodeFormatsUpdate} defaultValue=\"0x1000\" className=\"ipt-barcodeFormat\" defaultChecked={(this.props.runtimeSettings.barcodeFormatIds & 0x1000) === 0x1000} />GS1 DATABAR TRUNCATED</label>\r\n                                    <label><input type=\"checkbox\" onClick={this.barcodeFormatsUpdate} defaultValue=\"0x2000\" className=\"ipt-barcodeFormat\" defaultChecked={(this.props.runtimeSettings.barcodeFormatIds & 0x2000) === 0x2000} />GS1 DATABAR STACKED</label>\r\n                                    <label><input type=\"checkbox\" onClick={this.barcodeFormatsUpdate} defaultValue=\"0x4000\" className=\"ipt-barcodeFormat\" defaultChecked={(this.props.runtimeSettings.barcodeFormatIds & 0x4000) === 0x4000} />GS1 DATABAR STACKED OMNIDIRECTIONAL</label>\r\n                                    <label><input type=\"checkbox\" onClick={this.barcodeFormatsUpdate} defaultValue=\"0x8000\" className=\"ipt-barcodeFormat\" defaultChecked={(this.props.runtimeSettings.barcodeFormatIds & 0x8000) === 0x8000} />GS1 DATABAR EXPANDED</label>\r\n                                    <label><input type=\"checkbox\" onClick={this.barcodeFormatsUpdate} defaultValue=\"0x10000\" className=\"ipt-barcodeFormat\" defaultChecked={(this.props.runtimeSettings.barcodeFormatIds & 0x10000) === 0x10000} />GS1 DATABAR EXPANDED STACKED</label>\r\n                                    <label><input type=\"checkbox\" onClick={this.barcodeFormatsUpdate} defaultValue=\"0x20000\" className=\"ipt-barcodeFormat\" defaultChecked={(this.props.runtimeSettings.barcodeFormatIds & 0x20000) === 0x20000} />GS1 DATABAR LIMITED</label>\r\n                                </Card>\r\n\r\n                                <label><input type=\"checkbox\" onClick={this.barcodeFormatsUpdate} defaultValue=\"0x2000000\" className=\"ipt-barcodeFormat\" defaultChecked={(this.props.runtimeSettings.barcodeFormatIds & 0x2000000) === 0x2000000} />PDF 417</label>\r\n                                <label><input type=\"checkbox\" onClick={this.barcodeFormatsUpdate} defaultValue=\"0x80000\" className=\"ipt-barcodeFormat\" defaultChecked={(this.props.runtimeSettings.barcodeFormatIds & 0x80000) === 0x80000} />Micro PDF 417</label>\r\n                                <label><input type=\"checkbox\" onClick={this.barcodeFormatsUpdate} defaultValue=\"0x4000000\" className=\"ipt-barcodeFormat\" defaultChecked={(this.props.runtimeSettings.barcodeFormatIds & 0x4000000) === 0x4000000} />QR Code</label>\r\n                                <label><input type=\"checkbox\" onClick={this.barcodeFormatsUpdate} defaultValue=\"0x40000000\" className=\"ipt-barcodeFormat\" defaultChecked={(this.props.runtimeSettings.barcodeFormatIds & 0x40000000) === 0x40000000} />Micro QR Code</label>\r\n                                <label><input type=\"checkbox\" onClick={this.barcodeFormatsUpdate} defaultValue=\"0x8000000\" className=\"ipt-barcodeFormat\" defaultChecked={(this.props.runtimeSettings.barcodeFormatIds & 0x8000000) === 0x8000000} />DataMatrix</label>\r\n                                <label><input type=\"checkbox\" onClick={this.barcodeFormatsUpdate} defaultValue=\"0x10000000\" className=\"ipt-barcodeFormat\" defaultChecked={(this.props.runtimeSettings.barcodeFormatIds & 0x10000000) === 0x10000000} />Aztec Code</label>\r\n                                <label><input type=\"checkbox\" onClick={this.barcodeFormatsUpdate} defaultValue=\"0x20000000\" className=\"ipt-barcodeFormat\" defaultChecked={(this.props.runtimeSettings.barcodeFormatIds & 0x20000000) === 0x20000000} />Maxicode</label>\r\n                                <label><input type=\"checkbox\" onClick={this.barcodeFormatsUpdate} defaultValue=\"0x40000\" className=\"ipt-barcodeFormat\" defaultChecked={(this.props.runtimeSettings.barcodeFormatIds & 0x40000) === 0x40000} />Patch Code</label>\r\n                                <label><input type=\"checkbox\" onClick={this.barcodeFormatsUpdate} defaultValue=\"-0x80000000\" className=\"ipt-barcodeFormat\" defaultChecked={(this.props.runtimeSettings.barcodeFormatIds & -0x80000000) === -0x80000000} />GS1 COMPOSITE</label>\r\n                            </Card>\r\n                            <Card style={{ padding: '1vw', marginTop: '1vw' }} >\r\n                                <Card.Title style={{ width: '100%' }}>Basic Settings</Card.Title>\r\n                                <label htmlFor=\"ipt-runtimesettings-terminatePhase\">TerminatePhase</label>\r\n                                <select onChange={this.updateSettings} id=\"terminatePhase_1\" value={this.props.runtimeSettings.terminatePhase}>\r\n                                    <option value=\"1\">Region Predetected</option>\r\n                                    <option value=\"2\">Image Preprocessed</option>\r\n                                    <option value=\"4\">Image Binarized</option>\r\n                                    <option value=\"8\">Barcode Localized</option>\r\n                                    <option value=\"16\">Barcode Type Determind</option>\r\n                                    <option value=\"32\">Barcode Recognized</option>\r\n                                </select>\r\n\r\n                                <label htmlFor=\"ipt-runtimesettings-barcodeZoneMinDistanceToImageBorders\">BarcodeZoneMinDistanceToImageBorders</label>\r\n                                <input type=\"range\" onChange={this.updateRangeValue} min=\"0\" max=\"1000\" step=\"10\" defaultValue={this.props.runtimeSettings.barcodeZoneMinDistanceToImageBorders} factor=\"1\" />\r\n                                <input id=\"ipt-runtimesettings-barcodeZoneMinDistanceToImageBorders\" onKeyUp={this.updateRange} type=\"knumber\" min=\"0\" max=\"1000\" step=\"10\" defaultValue={this.props.runtimeSettings.barcodeZoneMinDistanceToImageBorders} factor=\"1\" />\r\n\r\n                                <label htmlFor=\"ipt-runtimesettings-deblurLevel\">DeblurLevel</label>\r\n                                <input type=\"range\" onChange={this.updateRangeValue} min=\"0\" max=\"9\" step=\"1\" defaultValue={this.props.runtimeSettings.deblurLevel} factor=\"1\" />\r\n                                <input id=\"ipt-runtimesettings-deblurLevel\" onKeyUp={this.updateRange} type=\"knumber\" min=\"0\" max=\"9\" step=\"1\" defaultValue={this.props.runtimeSettings.deblurLevel} factor=\"1\" />\r\n\r\n                                <label htmlFor=\"ipt-runtimesettings-expectedBarcodesCount\">ExpectedBarcodesCount</label>\r\n                                <input type=\"range\" onChange={this.updateRangeValue} min=\"0\" max=\"999\" step=\"1\" defaultValue={this.props.runtimeSettings.expectedBarcodesCount} factor=\"1\" />\r\n                                <input id=\"ipt-runtimesettings-expectedBarcodesCount\" onKeyUp={this.updateRange} type=\"knumber\" min=\"0\" max=\"999\" step=\"1\" defaultValue={this.props.runtimeSettings.expectedBarcodesCount} factor=\"1\" />\r\n\r\n                                <label htmlFor=\"ipt-runtimesettings-maxAlgorithmThreadCount\">MaxAlgorithmThreadCount</label>\r\n                                <input type=\"range\" onChange={this.updateRangeValue} min=\"1\" max=\"4\" step=\"1\" defaultValue={this.props.runtimeSettings.maxAlgorithmThreadCount} factor=\"1\" />\r\n                                <input id=\"ipt-runtimesettings-maxAlgorithmThreadCount\" onKeyUp={this.updateRange} type=\"knumber\" min=\"1\" max=\"4\" step=\"1\" defaultValue={this.props.runtimeSettings.maxAlgorithmThreadCount} factor=\"1\" />\r\n\r\n                                <label htmlFor=\"ipt-runtimesettings-minBarcodeTextLength\">MinBarcodeTextLength</label>\r\n                                <input type=\"range\" onChange={this.updateRangeValue} min=\"0\" max=\"200\" step=\"1\" defaultValue={this.props.runtimeSettings.minBarcodeTextLength} factor=\"1\" />\r\n                                <input id=\"ipt-runtimesettings-minBarcodeTextLength\" onKeyUp={this.updateRange} type=\"knumber\" min=\"0\" max=\"999\" step=\"1\" defaultValue={this.props.runtimeSettings.minBarcodeTextLength} factor=\"1\" />\r\n\r\n                                <label htmlFor=\"ipt-runtimesettings-minResultConfidence\">MinResultConfidence</label>\r\n                                <input type=\"range\" onChange={this.updateRangeValue} min=\"0\" max=\"100\" step=\"1\" defaultValue={this.props.runtimeSettings.minResultConfidence} factor=\"1\" />\r\n                                <input id=\"ipt-runtimesettings-minResultConfidence\" onKeyUp={this.updateRange} type=\"knumber\" min=\"0\" max=\"100\" step=\"1\" defaultValue={this.props.runtimeSettings.minResultConfidence} factor=\"1\" />\r\n\r\n                                <label htmlFor=\"ipt-runtimesettings-pdfRasterDPI\">PDFRasterDPI</label>\r\n                                <input type=\"range\" onChange={this.updateRangeValue} min=\"1\" max=\"5\" step=\"1\" defaultValue={parseInt(this.props.runtimeSettings.pdfRasterDPI / 100)} factor=\"100\" />\r\n                                <input id=\"ipt-runtimesettings-pdfRasterDPI\" onKeyUp={this.updateRange} readOnly type=\"knumber\" min=\"100\" max=\"500\" step=\"100\" defaultValue={this.props.runtimeSettings.pdfRasterDPI} factor=\"100\" />\r\n\r\n                                <label htmlFor=\"ipt-runtimesettings-scaleDownThreshold\">ScaleDownThreshold</label>\r\n                                <input type=\"range\" onChange={this.updateRangeValue} min=\"5\" max=\"1000\" step=\"1\" defaultValue={this.props.runtimeSettings.scaleDownThreshold / 100} factor=\"100\" />\r\n                                <input id=\"ipt-runtimesettings-scaleDownThreshold\" onKeyUp={this.updateRange} readOnly type=\"knumber\" min=\"500\" max=\"100000\" step=\"1\" defaultValue={this.props.runtimeSettings.scaleDownThreshold} factor=\"100\" />\r\n\r\n                                <label htmlFor=\"ipt-runtimesettings-timeout\">Timeout</label>\r\n                                <input type=\"range\" onChange={this.updateRangeValue} min=\"1\" max=\"100\" defaultValue={parseInt(this.props.runtimeSettings.timeout / 1000)} step=\"1\" factor=\"1000\" />\r\n                                <input id=\"ipt-runtimesettings-timeout\" onKeyUp={this.updateRange} type=\"knumber\" readOnly min=\"100\" max=\"100000\" step=\"1\" defaultValue={this.props.runtimeSettings.timeout} factor=\"1000\" />\r\n\r\n                                {this.props.runtimeSettings.region.length > 0 ?\r\n                                    (<>\r\n                                        {this.props.runtimeSettings.region.map((value, key) =>\r\n                                            <div key={this.messageKeyBase + 1600 + key} className=\"div-runtimesettings-region-container\" style={{ width: '100%' }}>\r\n                                                <label>Region {key + 1}  {key !== 0 && key === this.props.runtimeSettings.region.length - 1 ? <Button variant=\"light\" onClick={this.removeRegion}>X</Button> : \"\"}</label>\r\n                                                <label style={{ width: '100%', textAlign: 'center' }}>\r\n                                                    <input type=\"checkbox\" id={\"ipt-runtimesettings-regionMeasuredByPercentage_\" + (key + 1).toString()} defaultChecked={value === null ? false : !!value.regionMeasuredByPercentage} onClick={this.usePercentageOrNot} />By Percentage\r\n                                                </label>\r\n                                                <input type=\"kPercentage\" id={\"ipt-runtimesettings-regionTop_\" + (key + 1).toString()} className=\"ipt-runtimesettings-regionTop\" placeholder={value === null ? \"top\" : \"top(%)\"} defaultValue={value === null ? \"\" : value.regionTop} />\r\n                                                <input type=\"kPercentage\" id={\"ipt-runtimesettings-regionLeft_\" + (key + 1).toString()} className=\"ipt-runtimesettings-regionLeft\" placeholder={value === null ? \"left\" : \"left(%)\"} defaultValue={value === null ? \"\" : value.regionLeft} />\r\n                                                <input type=\"kPercentage\" id={\"ipt-runtimesettings-regionRight_\" + (key + 1).toString()} className=\"ipt-runtimesettings-regionRight\" placeholder={value === null ? \"right\" : \"right(%)\"} defaultValue={value === null ? \"\" : value.regionRight} />\r\n                                                <input type=\"kPercentage\" id={\"ipt-runtimesettings-regionBottom_\" + (key + 1).toString()} className=\"ipt-runtimesettings-regionBottom\" placeholder={value === null ? \"bottom\" : \"bottom(%)\"} defaultValue={value === null ? \"\" : value.regionBottom} />\r\n                                            </div>)}\r\n                                    </>)\r\n                                    :\r\n                                    (<div className=\"div-runtimesettings-region-container\" style={{ width: '100%' }}>\r\n                                        <label>Region</label>\r\n                                        <label style={{ width: '100%', textAlign: 'center' }}>\r\n                                            <input type=\"checkbox\" id=\"ipt-runtimesettings-regionMeasuredByPercentage_1\" defaultChecked={!!this.props.runtimeSettings.region.regionMeasuredByPercentage} onClick={this.usePercentageOrNot} />By Percentage\r\n                                            </label>\r\n                                        <input type=\"kPercentage\" id=\"ipt-runtimesettings-regionTop_1\" className=\"ipt-runtimesettings-regionTop\" placeholder={!!this.props.runtimeSettings.region.regionMeasuredByPercentage ? \"top(%)\" : \"top\"} defaultValue={this.props.runtimeSettings.region.regionTop === 0 ? \"\" : this.props.runtimeSettings.region.regionTop} />\r\n                                        <input type=\"kPercentage\" id=\"ipt-runtimesettings-regionLeft_1\" className=\"ipt-runtimesettings-regionLeft\" placeholder={!!this.props.runtimeSettings.region.regionMeasuredByPercentage ? \"left(%)\" : \"left\"} defaultValue={this.props.runtimeSettings.region.regionLeft === 0 ? \"\" : this.props.runtimeSettings.region.regionLeft} />\r\n                                        <input type=\"kPercentage\" id=\"ipt-runtimesettings-regionRight_1\" className=\"ipt-runtimesettings-regionRight\" placeholder={!!this.props.runtimeSettings.region.regionMeasuredByPercentage ? \"right(%)\" : \"right\"} defaultValue={this.props.runtimeSettings.region.regionRight === 0 ? \"\" : this.props.runtimeSettings.region.regionRight} />\r\n                                        <input type=\"kPercentage\" id=\"ipt-runtimesettings-regionBottom_1\" className=\"ipt-runtimesettings-regionBottom\" placeholder={!!this.props.runtimeSettings.region.regionMeasuredByPercentage ? \"bottom(%)\" : \"bottom\"} defaultValue={this.props.runtimeSettings.region.regionBottom === 0 ? \"\" : this.props.runtimeSettings.region.regionBottom} />\r\n                                    </div>)\r\n                                }\r\n                                <Button variant=\"primary\" style={{ width: \"80%\", margin: \"auto\" }} onClick={this.updateSettings}>Set Region(s)</Button>\r\n                            </Card>\r\n                            <Card style={{ padding: '1vw', marginTop: '1vw' }} >\r\n                                <Card.Title style={{ width: '100%' }}>More Settings</Card.Title>\r\n                                {this.props.fullFeature ? (<>\r\n                                    <label htmlFor=\"ipt-runtimesettings-barcodeFormatIds_2\">Extra Barcode Format</label>\r\n                                    <input id=\"ipt-runtimesettings-barcodeFormatIds_2\" onChange={this.updateBarcodeFormatsCheckStatus2} type=\"knumber\" defaultValue={this.props.runtimeSettings.barcodeFormatIds_2} />\r\n                                    <Card className=\"paddingOneVW allWidth\">\r\n                                        <label><input type=\"checkbox\" onClick={this.barcodeFormatsUpdate2} defaultValue=\"0\" defaultChecked={this.props.runtimeSettings.barcodeFormatIds_2 === 0} id=\"null-barcodeFormatIds_2\" />null</label>\r\n                                        <label><input type=\"checkbox\" onClick={this.barcodeFormatsUpdate2} defaultValue=\"1\" className=\"ipt-barcodeFormat2\" defaultChecked={(this.props.runtimeSettings.barcodeFormatIds_2 & 1) === 1} />NonStandard</label>\r\n                                        <label><input type=\"checkbox\" onClick={this.barcodeFormatsUpdate2} defaultValue=\"2\" className=\"ipt-barcodeFormat2\" defaultChecked={(this.props.runtimeSettings.barcodeFormatIds_2 & 2) === 2} />Dot Code</label>\r\n                                        <div className=\"div-PostalCodeFormat\">\r\n                                            <label><input type=\"checkbox\" onClick={this.barcodeFormatsUpdate2} className=\"ipt-barcodeFormat-combo2\" defaultValue=\"0x1F00000\" defaultChecked={(this.props.runtimeSettings.barcodeFormatIds_2 & 0x1F00000) === 0x1F00000} id=\"ipt-PostalCodeFormat\" />Postal Codes</label>\r\n                                            <Button variant=\"Light\" id=\"btn-togglePostalCodes\" className=\"btn-toggle\" onClick={this.toggleShowPostalCodeItems}></Button>\r\n                                        </div>\r\n                                        <Card id=\"div-PostalCodeFormatContainer\" className=\"div-1dFormatContainer\" style={this.state.showPostalCodeItems ? style.show : style.hide}>\r\n                                            <label><input type=\"checkbox\" onClick={this.barcodeFormatsUpdate2} defaultValue=\"0x100000\" className=\"ipt-barcodeFormat2\" defaultChecked={(this.props.runtimeSettings.barcodeFormatIds_2 & 0x100000) === 0x100000} />USPS Intelligent Mail</label>\r\n                                            <label><input type=\"checkbox\" onClick={this.barcodeFormatsUpdate2} defaultValue=\"0x200000\" className=\"ipt-barcodeFormat2\" defaultChecked={(this.props.runtimeSettings.barcodeFormatIds_2 & 0x200000) === 0x200000} />PostNet</label>\r\n                                            <label><input type=\"checkbox\" onClick={this.barcodeFormatsUpdate2} defaultValue=\"0x400000\" className=\"ipt-barcodeFormat2\" defaultChecked={(this.props.runtimeSettings.barcodeFormatIds_2 & 0x400000) === 0x400000} />Planet</label>\r\n                                            <label><input type=\"checkbox\" onClick={this.barcodeFormatsUpdate2} defaultValue=\"0x800000\" className=\"ipt-barcodeFormat2\" defaultChecked={(this.props.runtimeSettings.barcodeFormatIds_2 & 0x800000) === 0x800000} />Australian Post</label>\r\n                                            <label><input type=\"checkbox\" onClick={this.barcodeFormatsUpdate2} defaultValue=\"0x1000000\" className=\"ipt-barcodeFormat2\" defaultChecked={(this.props.runtimeSettings.barcodeFormatIds_2 & 0x1000000) === 0x1000000} />UK Royal Mail</label>\r\n                                        </Card>\r\n                                    </Card></>) : \"\"}\r\n\r\n                                <label htmlFor=\"ipt-runtimesettings-returnBarcodeZoneClarity\">ReturnBarcodeZoneClarity</label>\r\n                                <input type=\"range\" onChange={this.updateRangeValue} min=\"0\" max=\"1\" step=\"1\" defaultValue={this.props.runtimeSettings.returnBarcodeZoneClarity} factor=\"1\" />\r\n                                <input id=\"ipt-runtimesettings-returnBarcodeZoneClarity\" onKeyUp={this.updateRange} type=\"knumber\" min=\"0\" max=\"1\" step=\"1\" defaultValue={this.props.runtimeSettings.returnBarcodeZoneClarity} factor=\"1\" />\r\n\r\n                                <label htmlFor=\"pdfReadingMode\">PDFReadingMode</label>\r\n                                <select onChange={this.updateSettings} id=\"pdfReadingMode_1\" value={this.props.runtimeSettings.pdfReadingMode}>\r\n                                    <option value=\"1\">Auto</option>\r\n                                    <option value=\"2\">Vector</option>\r\n                                    <option value=\"4\">Raster</option>\r\n                                </select>\r\n\r\n                                <label htmlFor=\"resultCoordinateType\">ResultCoordinateType</label>\r\n                                <select onChange={this.updateSettings} id=\"resultCoordinateType_1\" value={this.props.runtimeSettings.resultCoordinateType}>\r\n                                    <option value=\"1\">Pixel</option>\r\n                                    <option value=\"2\">Percentage</option>\r\n                                </select>\r\n\r\n                                {this.props.fullFeature ? (<>\r\n                                    <label htmlFor=\"ipt-runtimesettings-intermediateResultTypes\">IntermediateResultTypes (check below)</label>\r\n                                    <input id=\"ipt-runtimesettings-intermediateResultTypes\" onChange={this.intermediateResultTypesUpdate} type=\"knumber\" defaultValue={this.props.runtimeSettings.intermediateResultTypes} />\r\n                                    <Card style={{ padding: '1vw', marginTop: '1vw', width: '100%' }}>\r\n                                        <label><input type=\"checkbox\" className=\"ipt-updateIntermediateResultTypes\" defaultValue=\"1\" onClick={this.intermediateResultTypesUpdate} defaultChecked={(this.props.runtimeSettings.intermediateResultTypes & 1) === 1} />ORIGINAL_IMAGE</label>\r\n                                        <label><input type=\"checkbox\" className=\"ipt-updateIntermediateResultTypes\" defaultValue=\"2\" onClick={this.intermediateResultTypesUpdate} defaultChecked={(this.props.runtimeSettings.intermediateResultTypes & 2) === 2} />COLOUR_CLUSTERED_IMAGE</label>\r\n                                        <label><input type=\"checkbox\" className=\"ipt-updateIntermediateResultTypes\" defaultValue=\"4\" onClick={this.intermediateResultTypesUpdate} defaultChecked={(this.props.runtimeSettings.intermediateResultTypes & 4) === 4} />COLOUR_CONVERTED_GRAYSCALE_IMAGE</label>\r\n                                        <label><input type=\"checkbox\" className=\"ipt-updateIntermediateResultTypes\" defaultValue=\"8\" onClick={this.intermediateResultTypesUpdate} defaultChecked={(this.props.runtimeSettings.intermediateResultTypes & 8) === 8} />TRANSFORMED_GRAYSCALE_IMAGE</label>\r\n                                        <label><input type=\"checkbox\" className=\"ipt-updateIntermediateResultTypes\" defaultValue=\"0x10\" onClick={this.intermediateResultTypesUpdate} defaultChecked={(this.props.runtimeSettings.intermediateResultTypes & 0x10) === 0x10} />PREDETECTED_REGION</label>\r\n                                        <label><input type=\"checkbox\" className=\"ipt-updateIntermediateResultTypes\" defaultValue=\"0x20\" onClick={this.intermediateResultTypesUpdate} defaultChecked={(this.props.runtimeSettings.intermediateResultTypes & 0x20) === 0x20} />PREPROCESSED_IMAGE</label>\r\n                                        <label><input type=\"checkbox\" className=\"ipt-updateIntermediateResultTypes\" defaultValue=\"0x40\" onClick={this.intermediateResultTypesUpdate} defaultChecked={(this.props.runtimeSettings.intermediateResultTypes & 0x40) === 0x40} />BINARIZED_IMAGE</label>\r\n                                        <label><input type=\"checkbox\" className=\"ipt-updateIntermediateResultTypes\" defaultValue=\"0x80\" onClick={this.intermediateResultTypesUpdate} defaultChecked={(this.props.runtimeSettings.intermediateResultTypes & 0x80) === 0x80} />TEXT_ZONE</label>\r\n                                        <label><input type=\"checkbox\" className=\"ipt-updateIntermediateResultTypes\" defaultValue=\"0x100\" onClick={this.intermediateResultTypesUpdate} defaultChecked={(this.props.runtimeSettings.intermediateResultTypes & 0x100) === 0x100} />CONTOUR</label>\r\n                                        <label><input type=\"checkbox\" className=\"ipt-updateIntermediateResultTypes\" defaultValue=\"0x200\" onClick={this.intermediateResultTypesUpdate} defaultChecked={(this.props.runtimeSettings.intermediateResultTypes & 0x200) === 0x200} />LINE_SEGMENT</label>\r\n                                        <label><input type=\"checkbox\" className=\"ipt-updateIntermediateResultTypes\" defaultValue=\"0x400\" onClick={this.intermediateResultTypesUpdate} defaultChecked={(this.props.runtimeSettings.intermediateResultTypes & 0x400) === 0x400} />FORM</label>\r\n                                        <label><input type=\"checkbox\" className=\"ipt-updateIntermediateResultTypes\" defaultValue=\"0x800\" onClick={this.intermediateResultTypesUpdate} defaultChecked={(this.props.runtimeSettings.intermediateResultTypes & 0x800) === 0x800} />SEGMENTATION_BLOCK</label>\r\n                                        <label><input type=\"checkbox\" className=\"ipt-updateIntermediateResultTypes\" defaultValue=\"0x1000\" onClick={this.intermediateResultTypesUpdate} defaultChecked={(this.props.runtimeSettings.intermediateResultTypes & 0x1000) === 0x1000} />TYPED_BARCODE_ZONE</label>\r\n                                    </Card>\r\n                                </>) : \"\"}\r\n                            </Card>\r\n                            <Card style={{ padding: '1vw', marginTop: '1vw' }} id=\"div-runtimesettings-binarizationModes-container\" className=\"div-runtimesettings-mode-container\">\r\n                                <Card.Title style={{ width: '100%' }}>BinarizationModes</Card.Title>\r\n                                <div className=\"div-algsContainer\">\r\n                                    {this.props.runtimeSettings.binarizationModes.map((value, key) =>\r\n                                        <div key={this.messageKeyBase + key}>\r\n                                            <select onChange={this.updateSettings} id={\"binarizationModes_\" + (key + 1).toString()} value={value}>\r\n                                                <option value=\"0\">Skip</option>\r\n                                                <option value=\"1\">Auto</option>\r\n                                                <option value=\"2\">LocalBlock</option>\r\n                                                <option value=\"4\">Threshold</option>\r\n                                            </select>\r\n                                            <Card className={\"div-runtimesettings-ModeArgument-container div-runtimesettings-details-container paddingOneVW\" + key.toString()} style={value === 2 ? style.show : style.hide} >\r\n                                                <div >\r\n                                                    <label htmlFor={\"SMA-BinarizationModes-\" + key.toString() + \"-BlockSizeX\"}>BlockSizeX</label>\r\n                                                    <input type=\"range\" onChange={this.updateRangeValue} min=\"0\" max=\"1000\" step=\"1\" defaultValue=\"0\" factor=\"1\" />\r\n                                                    <input data-id={\"SMA-BinarizationModes-\" + key.toString() + \"-BlockSizeX\"} onKeyUp={this.updateRange} type=\"knumber\" min=\"0\" max=\"1000\" step=\"1\" defaultValue=\"0\" factor=\"1\" />\r\n                                                </div>\r\n                                                <div>\r\n                                                    <label htmlFor={\"SMA-BinarizationModes-\" + key.toString() + \"-BlockSizeY\"}>BlockSizeY</label>\r\n                                                    <input type=\"range\" onChange={this.updateRangeValue} min=\"0\" max=\"1000\" step=\"1\" defaultValue=\"0\" factor=\"1\" />\r\n                                                    <input data-id={\"SMA-BinarizationModes-\" + key.toString() + \"-BlockSizeY\"} onKeyUp={this.updateRange} type=\"knumber\" min=\"0\" max=\"1000\" step=\"1\" defaultValue=\"0\" factor=\"1\" />\r\n                                                </div>\r\n                                                <div>\r\n                                                    <label htmlFor={\"SMA-BinarizationModes-\" + key.toString() + \"-EnableFillBinaryVacancy\"}>EnableFillBinaryVacancy</label>\r\n                                                    <input type=\"range\" onChange={this.updateRangeValue} min=\"0\" max=\"1\" step=\"1\" defaultValue=\"1\" factor=\"1\" />\r\n                                                    <input data-id={\"SMA-BinarizationModes-\" + key.toString() + \"-EnableFillBinaryVacancy\"} onKeyUp={this.updateRange} type=\"knumber\" min=\"0\" max=\"1\" step=\"1\" defaultValue=\"1\" factor=\"1\" />\r\n                                                </div>\r\n                                                <div>\r\n                                                    <label htmlFor={\"SMA-BinarizationModes-\" + key.toString() + \"-ImagePreprocessingModesIndex\"}>ImagePreprocessingModesIndex</label>\r\n                                                    <input type=\"range\" onChange={this.updateRangeValue} min=\"-1\" max=\"7\" step=\"1\" defaultValue=\"-1\" factor=\"1\" />\r\n                                                    <input data-id={\"SMA-BinarizationModes-\" + key.toString() + \"-ImagePreprocessingModesIndex\"} onKeyUp={this.updateRange} type=\"knumber\" min=\"-1\" max=\"7\" step=\"1\" defaultValue=\"-1\" factor=\"1\" />\r\n                                                </div>\r\n                                                <div>\r\n                                                    <label htmlFor={\"SMA-BinarizationModes-\" + key.toString() + \"-ThreshValueCoefficient\"}>ThreshValueCoefficient</label>\r\n                                                    <input type=\"range\" onChange={this.updateRangeValue} min=\"-255\" max=\"255\" step=\"1\" defaultValue=\"10\" factor=\"1\" />\r\n                                                    <input data-id={\"SMA-BinarizationModes-\" + key.toString() + \"-ThreshValueCoefficient\"} onKeyUp={this.updateRange} type=\"knumber\" min=\"-255\" max=\"255\" step=\"1\" defaultValue=\"10\" factor=\"1\" />\r\n                                                </div>\r\n                                                <Button style={{ width: '45%', marginRight: '9%' }} variant=\"outline-success\" onClick={this.getModeArgument}>Get Current</Button>\r\n                                                <Button style={{ width: '45%' }} variant=\"outline-primary\" onClick={this.setModeArguments}>Submit </Button>\r\n                                            </Card>\r\n                                            <Card className={\"div-runtimesettings-ModeArgument-container div-runtimesettings-details-container paddingOneVW\" + key.toString()} style={value === 4 ? style.show : style.hide} >\r\n                                                <div>\r\n                                                    <label htmlFor={\"SMA-BinarizationModes-\" + key.toString() + \"-BinarizationThreshold\"}>BinarizationThreshold</label>\r\n                                                    <input type=\"range\" onChange={this.updateRangeValue} min=\"-1\" max=\"255\" step=\"1\" defaultValue=\"-1\" factor=\"1\" />\r\n                                                    <input data-id={\"SMA-BinarizationModes-\" + key.toString() + \"-BinarizationThreshold\"} onKeyUp={this.updateRange} type=\"knumber\" min=\"-1\" max=\"255\" step=\"1\" defaultValue=\"-1\" factor=\"1\" />\r\n                                                </div>\r\n                                                <Button style={{ width: '45%', marginRight: '9%' }} variant=\"outline-success\" onClick={this.getModeArgument}>Get Current</Button>\r\n                                                <Button style={{ width: '45%' }} variant=\"outline-primary\" onClick={this.setModeArguments}>Submit </Button>\r\n                                            </Card>\r\n                                        </div>\r\n                                    )}\r\n                                </div>\r\n                            </Card>\r\n                            <Card style={{ padding: '1vw', marginTop: '1vw' }} id=\"div-runtimesettings-deblurModes-container\" className=\"div-runtimesettings-mode-container\">\r\n                                <Card.Title style={{ width: '100%' }}>deblurModes</Card.Title>\r\n                                <div className=\"div-algsContainer\">\r\n                                    {this.props.runtimeSettings.deblurModes.map((value, key) =>\r\n                                        <div key={this.messageKeyBase + 100 + key}>\r\n                                            <select onChange={this.updateSettings} id={\"deblurModes_\" + (key + 1).toString()} value={value}>\r\n                                                <option value=\"0\">Skip</option>\r\n                                                <option value=\"1\">DirectBinarization</option>\r\n                                                <option value=\"2\">ThresholdBinarization</option>\r\n                                                <option value=\"4\">GrayEqualization</option>\r\n                                                <option value=\"8\">Smoothing</option>\r\n                                                <option value=\"16\">Morphing</option>\r\n                                                <option value=\"32\">DeepAnalysis</option>\r\n                                                <option value=\"64\">Sharpening</option>\r\n                                            </select>\r\n                                        </div>\r\n                                    )}\r\n                                </div>\r\n                            </Card>\r\n                            <Card style={{ padding: '1vw', marginTop: '1vw' }} id=\"div-runtimesettings-localizationModes-container\" className=\"div-runtimesettings-mode-container\">\r\n                                <Card.Title style={{ width: '100%' }}>LocalizationModes</Card.Title>\r\n                                <div className=\"div-algsContainer\">\r\n                                    {this.props.runtimeSettings.localizationModes.map((value, key) =>\r\n                                        <div key={this.messageKeyBase + 200 + key}>\r\n                                            <select onChange={this.updateSettings} id={\"localizationModes_\" + (key + 1).toString()} value={value}>\r\n                                                <option value=\"0\">Skip</option>\r\n                                                <option value=\"2\">ConnectedBlocks</option>\r\n                                                <option value=\"4\">Statistics</option>\r\n                                                <option value=\"8\">Lines</option>\r\n                                                <option value=\"16\">ScanDirectly</option>\r\n                                                <option value=\"32\">StatisticsMarks</option>\r\n                                            </select>\r\n                                            <Card className=\"div-runtimesettings-details-container paddingOneVW\" style={value === 16 ? style.show : style.hide}>\r\n                                                <div><label htmlFor={\"SMA-LocalizationModes-\" + key.toString() + \"-ScanStride\"}>ScanStride</label>\r\n                                                    <input type=\"range\" onChange={this.updateRangeValue} min=\"0\" max=\"999\" step=\"1\" defaultValue=\"0\" factor=\"1\" />\r\n                                                    <input data-id={\"SMA-LocalizationModes-\" + key.toString() + \"-ScanStride\"} onKeyUp={this.updateRange} type=\"knumber\" min=\"0\" max=\"999\" step=\"1\" defaultValue=\"0\" factor=\"1\" />\r\n                                                </div>\r\n                                                <div><label htmlFor={\"SMA-LocalizationModes-\" + key.toString() + \"-ScanDirection\"}>ScanDirection (both, vertical, horizontal)</label>\r\n                                                    <input type=\"range\" onChange={this.updateRangeValue} min=\"0\" max=\"2\" step=\"1\" defaultValue=\"0\" factor=\"1\" />\r\n                                                    <input data-id={\"SMA-LocalizationModes-\" + key.toString() + \"-ScanDirection\"} onKeyUp={this.updateRange} type=\"knumber\" min=\"0\" max=\"2\" step=\"1\" defaultValue=\"0\" factor=\"1\" />\r\n                                                </div>\r\n                                                <Button style={{ width: '45%', marginRight: '9%' }} variant=\"outline-success\" onClick={this.getModeArgument}>Get Current</Button>\r\n                                                <Button style={{ width: '45%' }} variant=\"outline-primary\" onClick={this.setModeArguments}>Submit </Button>\r\n                                            </Card>\r\n                                        </div>\r\n                                    )}\r\n                                </div>\r\n                            </Card>\r\n                            <Card style={{ padding: '1vw', marginTop: '1vw' }} id=\"div-runtimesettings-scaleUpModes-container\" className=\"div-runtimesettings-mode-container\">\r\n                                <Card.Title style={{ width: '100%' }}>ScaleUpModes</Card.Title>\r\n                                <div className=\"div-algsContainer\">\r\n                                    {this.props.runtimeSettings.scaleUpModes.map((value, key) =>\r\n                                        <div key={this.messageKeyBase + 300 + key}>\r\n                                            <select onChange={this.updateSettings} id={\"scaleUpModes_\" + (key + 1).toString()} value={value}>\r\n                                                <option value=\"0\">Skip</option>\r\n                                                <option value=\"1\">Auto</option>\r\n                                                <option value=\"2\">LinearInterpolation</option>\r\n                                                <option value=\"4\">NearestNeighbourInterpolation</option>\r\n                                            </select>\r\n                                            <Card className=\"div-runtimesettings-details-container paddingOneVW\" style={value > 1 ? style.show : style.hide}>\r\n                                                <div>\r\n                                                    <label htmlFor={\"SMA-ScaleUpModes-\" + key.toString() + \"-AcuteAngleWithXThreshold\"}>AcuteAngleWithXThreshold</label>\r\n                                                    <input type=\"range\" onChange={this.updateRangeValue} min=\"-1\" max=\"90\" step=\"1\" defaultValue=\"-1\" factor=\"1\" />\r\n                                                    <input data-id={\"SMA-ScaleUpModes-\" + key.toString() + \"-AcuteAngleWithXThreshold\"} onKeyUp={this.updateRange} type=\"knumber\" min=\"-1\" max=\"90\" step=\"1\" defaultValue=\"-1\" factor=\"1\" />\r\n                                                </div>\r\n                                                <div>\r\n                                                    <label htmlFor={\"SMA-ScaleUpModes-\" + key.toString() + \"-ModuleSizeThreshold\"}>ModuleSizeThreshold</label>\r\n                                                    <input type=\"range\" onChange={this.updateRangeValue} min=\"0\" max=\"999\" step=\"1\" defaultValue=\"0\" factor=\"1\" />\r\n                                                    <input data-id={\"SMA-ScaleUpModes-\" + key.toString() + \"-ModuleSizeThreshold\"} onKeyUp={this.updateRange} type=\"knumber\" min=\"0\" max=\"999\" step=\"1\" defaultValue=\"0\" factor=\"1\" />\r\n                                                </div>\r\n                                                <div>\r\n                                                    <label htmlFor={\"SMA-ScaleUpModes-\" + key.toString() + \"-TargetModuleSize\"}>TargetModuleSize</label>\r\n                                                    <input type=\"range\" onChange={this.updateRangeValue} min=\"0\" max=\"999\" step=\"1\" defaultValue=\"0\" factor=\"1\" />\r\n                                                    <input data-id={\"SMA-ScaleUpModes-\" + key.toString() + \"-TargetModuleSize\"} onKeyUp={this.updateRange} type=\"knumber\" min=\"0\" max=\"999\" step=\"1\" defaultValue=\"0\" factor=\"1\" />\r\n                                                </div>\r\n                                                <Button style={{ width: '45%', marginRight: '9%' }} variant=\"outline-success\" onClick={this.getModeArgument}>Get Current</Button>\r\n                                                <Button style={{ width: '45%' }} variant=\"outline-primary\" onClick={this.setModeArguments}>Submit </Button>\r\n                                            </Card>\r\n                                        </div>\r\n                                    )}\r\n                                </div>\r\n                            </Card>\r\n                            <Card style={{ padding: '1vw', marginTop: '1vw' }} id=\"div-runtimesettings-textResultOrderModes-container\" className=\"div-runtimesettings-mode-container\">\r\n                                <Card.Title style={{ width: '100%' }}>textResultOrderModes</Card.Title>\r\n                                <div className=\"div-algsContainer\">\r\n                                    {this.props.runtimeSettings.textResultOrderModes.map((value, key) =>\r\n                                        <div key={this.messageKeyBase + 400 + key}>\r\n                                            <select onChange={this.updateSettings} id={\"textResultOrderModes_\" + (key + 1).toString()} value={value}>\r\n                                                <option value=\"0\">Skip</option>\r\n                                                <option value=\"1\">Confidence</option>\r\n                                                <option value=\"2\">Position</option>\r\n                                                <option value=\"4\">Format</option>\r\n                                            </select>\r\n                                        </div>\r\n                                    )}\r\n                                </div>\r\n                            </Card>\r\n                        </div>\r\n                        {/* Further modes */}\r\n                        <div className=\"div-advanceSettingsHeader\" style={{ height: \"auto\", borderTop: \"1px solid #dee2e6\" }}>\r\n                            <h4 htmlFor=\"ipt-runtimesettings-FurtherModes\">Further Modes</h4>\r\n                            <button className=\"btn-toggle\" onClick={this.toggleShowFurtherModesItems}></button>\r\n                        </div>\r\n                        <div className=\"div-advanceSettings div-runtimesettings-details-container\" style={this.state.showFurtherModesItems ? style.show : style.hide}>\r\n                            <Card style={{ padding: '1vw', marginTop: '1vw' }} id=\"div-runtimesettings-barcodeColourModes-container\" className=\"div-runtimesettings-mode-container\">\r\n                                <Card.Title style={{ width: '100%' }}>BarcodeColourModes</Card.Title>\r\n                                <div className=\"div-algsContainer\">\r\n                                    {this.props.runtimeSettings.furtherModes.barcodeColourModes.map((value, key) =>\r\n                                        <div key={this.messageKeyBase + 500 + key}>\r\n                                            <select onChange={this.updateSettings} id={\"barcodeColourModes_\" + (key + 1).toString()} value={value}>\r\n                                                <option value=\"0\">Skip</option>\r\n                                                <option value=\"1\">DarkOnLight</option>\r\n                                                <option value=\"2\">LightOnDark</option>\r\n                                                <option value=\"4\">DarkOnDark</option>\r\n                                                <option value=\"8\">LightOnLight</option>\r\n                                                <option value=\"16\">DarkLightMixed</option>\r\n                                                <option value=\"32\">DarkOnLightDarkSurrounding</option>\r\n                                            </select>\r\n                                            <Card className=\"div-runtimesettings-details-container paddingOneVW\" style={value !== 0 ? style.show : style.hide}>\r\n                                                <div>\r\n                                                    <label htmlFor={\"SMA-BarcodeColourModes-\" + key.toString() + \"-LightReflection\"}>LightReflection</label>\r\n                                                    <input type=\"range\" onChange={this.updateRangeValue} min=\"0\" max=\"1\" step=\"1\" defaultValue=\"1\" factor=\"1\" />\r\n                                                    <input data-id={\"SMA-BarcodeColourModes-\" + key.toString() + \"-LightReflection\"} onKeyUp={this.updateRange} type=\"knumber\" min=\"0\" max=\"1\" step=\"1\" defaultValue=\"1\" factor=\"1\" />\r\n                                                </div>\r\n                                                <Button style={{ width: '45%', marginRight: '9%' }} variant=\"outline-success\" onClick={this.getModeArgument}>Get Current</Button>\r\n                                                <Button style={{ width: '45%' }} variant=\"outline-primary\" onClick={this.setModeArguments}>Submit </Button>\r\n                                            </Card>\r\n                                        </div>\r\n                                    )}\r\n                                </div>\r\n                            </Card>\r\n                            <Card style={{ padding: '1vw', marginTop: '1vw' }} id=\"div-runtimesettings-barcodeComplementModes-container\" className=\"div-runtimesettings-mode-container\">\r\n                                <Card.Title style={{ width: '100%' }}>barcodeComplementModes</Card.Title>\r\n                                <div className=\"div-algsContainer\">\r\n                                    {this.props.runtimeSettings.furtherModes.barcodeComplementModes.map((value, key) =>\r\n                                        <div key={this.messageKeyBase + 600 + key}>\r\n                                            <select onChange={this.updateSettings} id={\"barcodeComplementModes_\" + (key + 1).toString()} value={value}>\r\n                                                <option value=\"0\">Skip</option>\r\n                                                <option value=\"1\">Auto</option>\r\n                                                <option value=\"2\">General</option>\r\n                                            </select>\r\n                                        </div>\r\n                                    )}\r\n                                </div>\r\n                            </Card>\r\n                            <Card style={{ padding: '1vw', marginTop: '1vw' }} id=\"div-runtimesettings-colourClusteringModes-container\" className=\"div-runtimesettings-mode-container\">\r\n                                <Card.Title style={{ width: '100%' }}>ColourClusteringModes</Card.Title>\r\n                                <div className=\"div-algsContainer\">\r\n                                    {this.props.runtimeSettings.furtherModes.colourClusteringModes.map((value, key) =>\r\n                                        <div key={this.messageKeyBase + 700 + key}>\r\n                                            <select onChange={this.updateSettings} id={\"colourClusteringModes_\" + (key + 1).toString()} value={value}>\r\n                                                <option value=\"0\">Skip</option>\r\n                                                <option value=\"1\">Auto</option>\r\n                                                <option value=\"2\">GeneralHSV</option>\r\n                                            </select>\r\n                                            <Card className=\"div-runtimesettings-details-container paddingOneVW\" style={value === 2 ? style.show : style.hide}>\r\n                                                <div>\r\n                                                    <label htmlFor={\"SMA-ColourClusteringModes-\" + key.toString() + \"-Sensitivity\"}>Sensitivity</label>\r\n                                                    <input type=\"range\" onChange={this.updateRangeValue} min=\"1\" max=\"9\" step=\"1\" defaultValue=\"5\" factor=\"1\" />\r\n                                                    <input data-id={\"SMA-ColourClusteringModes-\" + key.toString() + \"-Sensitivity\"} onKeyUp={this.updateRange} type=\"knumber\" min=\"1\" max=\"9\" step=\"1\" defaultValue=\"5\" factor=\"1\" />\r\n                                                </div>\r\n                                                <Button style={{ width: '45%', marginRight: '9%' }} variant=\"outline-success\" onClick={this.getModeArgument}>Get Current</Button>\r\n                                                <Button style={{ width: '45%' }} variant=\"outline-primary\" onClick={this.setModeArguments}>Submit </Button>\r\n                                            </Card>\r\n                                        </div>\r\n                                    )}\r\n                                </div>\r\n                            </Card>\r\n                            <Card style={{ padding: '1vw', marginTop: '1vw' }} id=\"div-runtimesettings-colourConversionModes-container\" className=\"div-runtimesettings-mode-container\">\r\n                                <Card.Title style={{ width: '100%' }}>ColourConversionModes</Card.Title>\r\n                                <div className=\"div-algsContainer\">\r\n                                    {this.props.runtimeSettings.furtherModes.colourConversionModes.map((value, key) =>\r\n                                        <div key={this.messageKeyBase + 800 + key}>\r\n                                            <select onChange={this.updateSettings} id={\"colourConversionModes_\" + (key + 1).toString()} value={value}>\r\n                                                <option value=\"0\">Skip</option>\r\n                                                <option value=\"1\">General</option>\r\n                                            </select>\r\n                                            <Card className=\"div-runtimesettings-details-container paddingOneVW\" style={value === 1 ? style.show : style.hide}>\r\n                                                <div>\r\n                                                    <label htmlFor={\"SMA-ColourConversionModes-\" + key.toString() + \"-BlueChannelWeight\"}>BlueChannelWeight</label>\r\n                                                    <input type=\"range\" onChange={this.updateRangeValue} min=\"-1\" max=\"1000\" step=\"1\" defaultValue=\"-1\" factor=\"1\" />\r\n                                                    <input data-id={\"SMA-ColourConversionModes-\" + key.toString() + \"-BlueChannelWeight\"} onKeyUp={this.updateRange} type=\"knumber\" min=\"-1\" max=\"1000\" step=\"1\" defaultValue=\"-1\" factor=\"1\" />\r\n                                                </div>\r\n                                                <div>\r\n                                                    <label htmlFor={\"SMA-ColourConversionModes-\" + key.toString() + \"-GreenChannelWeight\"}>GreenChannelWeight</label>\r\n                                                    <input type=\"range\" onChange={this.updateRangeValue} min=\"-1\" max=\"1000\" step=\"1\" defaultValue=\"-1\" factor=\"1\" />\r\n                                                    <input data-id={\"SMA-ColourConversionModes-\" + key.toString() + \"-GreenChannelWeight\"} onKeyUp={this.updateRange} type=\"knumber\" min=\"-1\" max=\"1000\" step=\"1\" defaultValue=\"-1\" factor=\"1\" />\r\n                                                </div>\r\n                                                <div>\r\n                                                    <label htmlFor={\"SMA-ColourConversionModes-\" + key.toString() + \"-RedChannelWeight\"}>RedChannelWeight</label>\r\n                                                    <input type=\"range\" onChange={this.updateRangeValue} min=\"-1\" max=\"1000\" step=\"1\" defaultValue=\"-1\" factor=\"1\" />\r\n                                                    <input data-id={\"SMA-ColourConversionModes-\" + key.toString() + \"-RedChannelWeight\"} onKeyUp={this.updateRange} type=\"knumber\" min=\"-1\" max=\"1000\" step=\"1\" defaultValue=\"-1\" factor=\"1\" />\r\n                                                </div>\r\n                                                <Button style={{ width: '45%', marginRight: '9%' }} variant=\"outline-success\" onClick={this.getModeArgument}>Get Current</Button>\r\n                                                <Button style={{ width: '45%' }} variant=\"outline-primary\" onClick={this.setModeArguments}>Submit </Button>\r\n                                            </Card>\r\n                                        </div>\r\n                                    )}\r\n                                </div>\r\n                            </Card>\r\n                            <Card style={{ padding: '1vw', marginTop: '1vw' }} id=\"div-runtimesettings-deformationResistingModes-container\" className=\"div-runtimesettings-mode-container\">\r\n                                <Card.Title style={{ width: '100%' }}>DeformationResistingModes</Card.Title>\r\n                                <div className=\"div-algsContainer\">\r\n                                    {this.props.runtimeSettings.furtherModes.deformationResistingModes.map((value, key) =>\r\n                                        <div key={this.messageKeyBase + 900 + key}>\r\n                                            <select onChange={this.updateSettings} id={\"deformationResistingModes_\" + (key + 1).toString()} value={value}>\r\n                                                <option value=\"0\">Skip</option>\r\n                                                <option value=\"1\">Auto</option>\r\n                                                <option value=\"2\">General</option>\r\n                                            </select>\r\n                                            <Card className=\"div-runtimesettings-details-container paddingOneVW\" style={value === 2 ? style.show : style.hide}>\r\n                                                <div>\r\n                                                    <label htmlFor={\"SMA-DeformationResistingModes-\" + key.toString() + \"-Level\"}>Level</label>\r\n                                                    <input type=\"range\" onChange={this.updateRangeValue} min=\"1\" max=\"9\" step=\"1\" defaultValue=\"5\" factor=\"1\" />\r\n                                                    <input data-id={\"SMA-DeformationResistingModes-\" + key.toString() + \"-Level\"} onKeyUp={this.updateRange} type=\"knumber\" min=\"1\" max=\"9\" step=\"1\" defaultValue=\"5\" factor=\"1\" />\r\n                                                </div>\r\n                                                <Button style={{ width: '45%', marginRight: '9%' }} variant=\"outline-success\" onClick={this.getModeArgument}>Get Current</Button>\r\n                                                <Button style={{ width: '45%' }} variant=\"outline-primary\" onClick={this.setModeArguments}>Submit </Button>\r\n                                            </Card>\r\n                                        </div>\r\n                                    )}\r\n                                </div>\r\n                            </Card>\r\n                            <Card style={{ padding: '1vw', marginTop: '1vw' }} id=\"div-runtimesettings-dpmCodeReadingModes-container\" className=\"div-runtimesettings-mode-container\">\r\n                                <Card.Title style={{ width: '100%' }}>dpmCodeReadingModes</Card.Title>\r\n                                <div className=\"div-algsContainer\">\r\n                                    {this.props.runtimeSettings.furtherModes.dpmCodeReadingModes.map((value, key) =>\r\n                                        <div key={this.messageKeyBase + 1000 + key}>\r\n                                            <select onChange={this.updateSettings} id={\"dpmCodeReadingModes_\" + (key + 1).toString()} value={value}>\r\n                                                <option value=\"0\">Skip</option>\r\n                                                <option value=\"1\">Auto</option>\r\n                                                <option value=\"2\">General</option>\r\n                                            </select>\r\n                                        </div>\r\n                                    )}\r\n                                </div>\r\n                            </Card>\r\n                            <Card style={{ padding: '1vw', marginTop: '1vw' }} id=\"div-runtimesettings-grayscaleTransformationModes-container\" className=\"div-runtimesettings-mode-container\">\r\n                                <Card.Title style={{ width: '100%' }}>grayscaleTransformationModes</Card.Title>\r\n                                <div className=\"div-algsContainer\">\r\n                                    {this.props.runtimeSettings.furtherModes.grayscaleTransformationModes.map((value, key) =>\r\n                                        <div key={this.messageKeyBase + 1100 + key}>\r\n                                            <select onChange={this.updateSettings} id={\"grayscaleTransformationModes_\" + (key + 1).toString()} value={value}>\r\n                                                <option value=\"0\">Skip</option>\r\n                                                <option value=\"1\">Inverted</option>\r\n                                                <option value=\"2\">Original</option>\r\n                                            </select>\r\n                                        </div>\r\n                                    )}\r\n                                </div>\r\n                            </Card>\r\n                            <Card style={{ padding: '1vw', marginTop: '1vw' }} id=\"div-runtimesettings-imagePreprocessingModes-container\" className=\"div-runtimesettings-mode-container\">\r\n                                <Card.Title style={{ width: '100%' }}>ImagePreprocessingModes</Card.Title>\r\n                                <div className=\"div-algsContainer\">\r\n                                    {this.props.runtimeSettings.furtherModes.imagePreprocessingModes.map((value, key) =>\r\n                                        <div key={this.messageKeyBase + 1200 + key}>\r\n                                            <select onChange={this.updateSettings} id={\"imagePreprocessingModes_\" + (key + 1).toString()} value={value}>\r\n                                                <option value=\"0\">Skip</option>\r\n                                                <option value=\"1\">Auto</option>\r\n                                                <option value=\"2\">General</option>\r\n                                                <option value=\"4\">GrayEqualize</option>\r\n                                                <option value=\"8\">GraySmooth</option>\r\n                                                <option value=\"16\">SharpenSmooth</option>\r\n                                            </select>\r\n                                            <Card className=\"div-runtimesettings-details-container paddingOneVW\" style={value === 4 ? style.show : style.hide}>\r\n                                                <div>\r\n                                                    <label htmlFor={\"SMA-ImagePreprocessingModes-\" + key.toString() + \"-Sensitivity\"}>Sensitivity</label>\r\n                                                    <input type=\"range\" onChange={this.updateRangeValue} min=\"1\" max=\"9\" step=\"1\" defaultValue=\"5\" factor=\"1\" />\r\n                                                    <input data-id={\"SMA-ImagePreprocessingModes-\" + key.toString() + \"-Sensitivity\"} onKeyUp={this.updateRange} type=\"knumber\" min=\"1\" max=\"9\" step=\"1\" defaultValue=\"5\" factor=\"1\" />\r\n                                                </div>\r\n                                                <Button style={{ width: '45%', marginRight: '9%' }} variant=\"outline-success\" onClick={this.getModeArgument}>Get Current</Button>\r\n                                                <Button style={{ width: '45%' }} variant=\"outline-primary\" onClick={this.setModeArguments}>Submit </Button>\r\n                                            </Card>\r\n                                            <Card className=\"div-runtimesettings-details-container paddingOneVW\" style={value === 8 || value === 16 ? style.show : style.hide}>\r\n                                                <div>\r\n                                                    <label htmlFor={\"SMA-ImagePreprocessingModes-\" + key.toString() + \"-SmoothBlockSizeX\"}>SmoothBlockSizeX</label>\r\n                                                    <input type=\"range\" min=\"3\" max=\"1000\" step=\"1\" defaultValue=\"3\" factor=\"1\" />\r\n                                                    <input data-id={\"SMA-ImagePreprocessingModes-\" + key.toString() + \"-SmoothBlockSizeX\"} type=\"knumber\" min=\"3\" max=\"1000\" step=\"1\" defaultValue=\"3\" factor=\"1\" />\r\n                                                </div>\r\n                                                <div>\r\n                                                    <label htmlFor={\"SMA-ImagePreprocessingModes-\" + key.toString() + \"-SmoothBlockSizeY\"}>SmoothBlockSizeY</label>\r\n                                                    <input type=\"range\" min=\"3\" max=\"1000\" step=\"1\" defaultValue=\"3\" factor=\"1\" />\r\n                                                    <input data-id={\"SMA-ImagePreprocessingModes-\" + key.toString() + \"-SmoothBlockSizeY\"} type=\"knumber\" min=\"3\" max=\"1000\" step=\"1\" defaultValue=\"3\" factor=\"1\" />\r\n                                                </div>\r\n                                                <Button style={{ width: '45%', marginRight: '9%' }} variant=\"outline-success\" onClick={this.getModeArgument}>Get Current</Button>\r\n                                                <Button style={{ width: '45%' }} variant=\"outline-primary\" onClick={this.setModeArguments}>Submit </Button>\r\n                                            </Card>\r\n                                            <Card className=\"div-runtimesettings-details-container paddingOneVW\" style={value === 16 ? style.show : style.hide}>\r\n                                                <div>\r\n                                                    <label htmlFor={\"SMA-ImagePreprocessingModes-\" + key.toString() + \"-SharpenBlockSizeX\"}>SharpenBlockSizeX</label>\r\n                                                    <input type=\"range\" min=\"3\" max=\"1000\" step=\"1\" defaultValue=\"3\" factor=\"1\" />\r\n                                                    <input data-id={\"SMA-ImagePreprocessingModes-\" + key.toString() + \"-SharpenBlockSizeX\"} type=\"knumber\" min=\"3\" max=\"1000\" step=\"1\" defaultValue=\"3\" factor=\"1\" />\r\n                                                </div>\r\n                                                <div>\r\n                                                    <label htmlFor={\"SMA-ImagePreprocessingModes-\" + key.toString() + \"-SharpenBlockSizeY\"}>SharpenBlockSizeY</label>\r\n                                                    <input type=\"range\" min=\"3\" max=\"1000\" step=\"1\" defaultValue=\"3\" factor=\"1\" />\r\n                                                    <input data-id={\"SMA-ImagePreprocessingModes-\" + key.toString() + \"-SharpenBlockSizeY\"} type=\"knumber\" min=\"3\" max=\"1000\" step=\"1\" defaultValue=\"3\" factor=\"1\" />\r\n                                                </div>\r\n                                                <Button style={{ width: '45%', marginRight: '9%' }} variant=\"outline-success\" onClick={this.getModeArgument}>Get Current</Button>\r\n                                                <Button style={{ width: '45%' }} variant=\"outline-primary\" onClick={this.setModeArguments}>Submit </Button>\r\n                                            </Card>\r\n                                            <Card className=\"div-runtimesettings-details-container paddingOneVW\" style={value === 32 ? style.show : style.hide}>\r\n                                                <div>\r\n                                                    <label htmlFor={\"SMA-ImagePreprocessingModes-\" + key.toString() + \"-MorphOperation\"}>MorphOperation</label>\r\n                                                    <select data-id={\"SMA-ImagePreprocessingModes-\" + key.toString() + \"-MorphOperation\"} defaultValue=\"Close\">\r\n                                                        <option value=\"Erode\">Erode</option>\r\n                                                        <option value=\"Dilate\">Dilate</option>\r\n                                                        <option value=\"Open\">Open</option>\r\n                                                        <option value=\"Close\">Close</option>\r\n                                                    </select>\r\n                                                </div>\r\n                                                <div>\r\n                                                    <label htmlFor={\"SMA-ImagePreprocessingModes-\" + key.toString() + \"-MorphShape\"}>MorphShape</label>\r\n                                                    <select data-id={\"SMA-ImagePreprocessingModes-\" + key.toString() + \"-MorphShape\"} defaultValue=\"Rectangle\">\r\n                                                        <option value=\"Rectangle\">Rectangle</option>\r\n                                                        <option value=\"Cross\">Cross</option>\r\n                                                        <option value=\"Ellipse\">Ellipse</option>\r\n                                                    </select>\r\n                                                </div>\r\n                                                <div>\r\n                                                    <label htmlFor={\"SMA-ImagePreprocessingModes-\" + key.toString() + \"-MorphOperationKernelSizeX\"}>MorphOperationKernelSizeX</label>\r\n                                                    <input type=\"range\" min=\"0\" max=\"1000\" step=\"1\" defaultValue=\"0\" factor=\"1\" />\r\n                                                    <input data-id={\"SMA-ImagePreprocessingModes-\" + key.toString() + \"-MorphOperationKernelSizeX\"} type=\"knumber\" min=\"0\" max=\"1000\" step=\"1\" defaultValue=\"0\" factor=\"1\" />\r\n                                                </div>\r\n                                                <div>\r\n                                                    <label htmlFor={\"SMA-ImagePreprocessingModes-\" + key.toString() + \"-MorphOperationKernelSizeY\"}>MorphOperationKernelSizeY</label>\r\n                                                    <input type=\"range\" min=\"0\" max=\"1000\" step=\"1\" defaultValue=\"0\" factor=\"1\" />\r\n                                                    <input data-id={\"SMA-ImagePreprocessingModes-\" + key.toString() + \"-MorphOperationKernelSizeY\"} type=\"knumber\" min=\"0\" max=\"1000\" step=\"1\" defaultValue=\"0\" factor=\"1\" />\r\n                                                </div>\r\n                                                <Button style={{ width: '45%', marginRight: '9%' }} variant=\"outline-success\" onClick={this.getModeArgument}>Get Current</Button>\r\n                                                <Button style={{ width: '45%' }} variant=\"outline-primary\" onClick={this.setModeArguments}>Submit </Button>\r\n                                            </Card>\r\n                                        </div>\r\n                                    )}\r\n                                </div>\r\n                            </Card>\r\n                            <Card style={{ padding: '1vw', marginTop: '1vw' }} id=\"div-runtimesettings-regionPredetectionModes-container\" className=\"div-runtimesettings-mode-container\">\r\n                                <Card.Title style={{ width: '100%' }}>RegionPredetectionModes</Card.Title>\r\n                                <div className=\"div-algsContainer\">\r\n                                    {this.props.runtimeSettings.furtherModes.regionPredetectionModes.map((value, key) =>\r\n                                        <div key={this.messageKeyBase + 1300 + key}>\r\n                                            <select onChange={this.updateSettings} id={\"regionPredetectionModes_\" + (key + 1).toString()} value={value}>\r\n                                                <option value=\"0\">Skip</option>\r\n                                                <option value=\"1\">Auto</option>\r\n                                                <option value=\"2\">General</option>\r\n                                                <option value=\"4\">RGB</option>\r\n                                                <option value=\"8\">Gray</option>\r\n                                                <option value=\"16\">HSV</option>\r\n                                            </select>\r\n                                            <Card className=\"div-runtimesettings-details-container paddingOneVW\" style={value > 2 ? style.show : style.hide}>\r\n                                                <div>\r\n                                                    <label htmlFor={\"SMA-RegionPredetectionModes-\" + key.toString() + \"-MinImageDimension\"}>MinImageDimension</label>\r\n                                                    <input type=\"range\" onChange={this.updateRangeValue} min=\"16384\" max=\"2147483647\" step=\"1\" defaultValue=\"262144\" factor=\"1\" />\r\n                                                    <input data-id={\"SMA-RegionPredetectionModes-\" + key.toString() + \"-MinImageDimension\"} onKeyUp={this.updateRange} type=\"knumber\" min=\"16384\" max=\"2147483647\" step=\"1\" defaultValue=\"262144\" factor=\"1\" />\r\n                                                </div>\r\n                                                <div>\r\n                                                    <label htmlFor={\"SMA-RegionPredetectionModes-\" + key.toString() + \"-Sensitivity\"}>Sensitivity</label>\r\n                                                    <input type=\"range\" onChange={this.updateRangeValue} min=\"1\" max=\"9\" step=\"1\" defaultValue=\"1\" factor=\"1\" />\r\n                                                    <input data-id={\"SMA-RegionPredetectionModes-\" + key.toString() + \"-Sensitivity\"} onKeyUp={this.updateRange} type=\"knumber\" min=\"1\" max=\"9\" step=\"1\" defaultValue=\"1\" factor=\"1\" />\r\n                                                </div>\r\n                                                <div>\r\n                                                    <label htmlFor={\"SMA-RegionPredetectionModes-\" + key.toString() + \"-SpatialIndexBlockSize\"}>SpatialIndexBlockSize</label>\r\n                                                    <input type=\"range\" onChange={this.updateRangeValue} min=\"1\" max=\"32\" step=\"5\" defaultValue=\"1\" factor=\"1\" />\r\n                                                    <input data-id={\"SMA-RegionPredetectionModes-\" + key.toString() + \"-SpatialIndexBlockSize\"} onKeyUp={this.updateRange} type=\"knumber\" min=\"1\" max=\"32\" step=\"1\" defaultValue=\"5\" factor=\"1\" />\r\n                                                </div>\r\n                                                <Button style={{ width: '45%', marginRight: '9%' }} variant=\"outline-success\" onClick={this.getModeArgument}>Get Current</Button>\r\n                                                <Button style={{ width: '45%' }} variant=\"outline-primary\" onClick={this.setModeArguments}>Submit </Button>\r\n                                            </Card>\r\n                                            <Card className=\"div-runtimesettings-details-container paddingOneVW\" style={value === 16 ? style.show : style.hide}>\r\n                                                <div>\r\n                                                    <label htmlFor={\"SMA-RegionPredetectionModes-\" + key.toString() + \"-RelativeBarcodeRegions\"}>RelativeBarcodeRegions</label>\r\n                                                    <input data-id={\"SMA-RegionPredetectionModes-\" + key.toString() + \"-RelativeBarcodeRegions\"} type=\"text\" defaultValue=\"1\" />\r\n                                                </div>\r\n                                                <div>\r\n                                                    <label htmlFor={\"SMA-RegionPredetectionModes-\" + key.toString() + \"-ForeAndBackgroundColours\"}>ForeAndBackgroundColours</label>\r\n                                                    <input data-id={\"SMA-RegionPredetectionModes-\" + key.toString() + \"-ForeAndBackgroundColours\"} type=\"text\" defaultValue=\"1\" />\r\n                                                </div>\r\n                                                <div>\r\n                                                    <label htmlFor={\"SMA-RegionPredetectionModes-\" + key.toString() + \"-AspectRatioRange\"}>AspectRatioRange</label>\r\n                                                    <input data-id={\"SMA-RegionPredetectionModes-\" + key.toString() + \"-AspectRatioRange\"} type=\"text\" defaultValue=\"1\" />\r\n                                                </div>\r\n                                                <div>\r\n                                                    <label htmlFor={\"SMA-RegionPredetectionModes-\" + key.toString() + \"-HeightRange\"}>HeightRange</label>\r\n                                                    <input data-id={\"SMA-RegionPredetectionModes-\" + key.toString() + \"-HeightRange\"} type=\"text\" defaultValue=\"1\" />\r\n                                                </div>\r\n                                                <div>\r\n                                                    <label htmlFor={\"SMA-RegionPredetectionModes-\" + key.toString() + \"-WidthRange\"}>WidthRange</label>\r\n                                                    <input data-id={\"SMA-RegionPredetectionModes-\" + key.toString() + \"-WidthRange\"} type=\"text\" defaultValue=\"1\" />\r\n                                                </div>\r\n                                                <div>\r\n                                                    <label htmlFor={\"SMA-RegionPredetectionModes-\" + key.toString() + \"-FindAccurateBoundary\"}>FindAccurateBoundary</label>\r\n                                                    <input type=\"range\" onChange={this.updateRangeValue} min=\"0\" max=\"1\" step=\"1\" defaultValue=\"1\" factor=\"1\" />\r\n                                                    <input data-id={\"SMA-RegionPredetectionModes-\" + key.toString() + \"-FindAccurateBoundary\"} onKeyUp={this.updateRange} type=\"knumber\" min=\"0\" max=\"0\" step=\"1\" defaultValue=\"1\" factor=\"1\" />\r\n                                                </div>\r\n                                                <Button style={{ width: '45%', marginRight: '9%' }} variant=\"outline-success\" onClick={this.getModeArgument}>Get Current</Button>\r\n                                                <Button style={{ width: '45%' }} variant=\"outline-primary\" onClick={this.setModeArguments}>Submit </Button>\r\n                                            </Card>\r\n                                        </div>\r\n                                    )}\r\n                                </div>\r\n                            </Card>\r\n                            <Card style={{ padding: '1vw', marginTop: '1vw' }} id=\"div-runtimesettings-textFilterModes-container\" className=\"div-runtimesettings-mode-container\">\r\n                                <Card.Title style={{ width: '100%' }}>TextFilterModes</Card.Title>\r\n                                <div className=\"div-algsContainer\">\r\n                                    {this.props.runtimeSettings.furtherModes.textFilterModes.map((value, key) =>\r\n                                        <div key={this.messageKeyBase + 1400 + key}>\r\n                                            <select onChange={this.updateSettings} id={\"textFilterModes_\" + (key + 1).toString()} value={value}>\r\n                                                <option value=\"0\">Skip</option>\r\n                                                <option value=\"1\">Auto</option>\r\n                                                <option value=\"2\">GeneralContour</option>\r\n                                            </select>\r\n                                            <Card className=\"div-runtimesettings-details-container paddingOneVW\" style={value === 2 ? style.show : style.hide}>\r\n                                                <div>\r\n                                                    <label htmlFor={\"SMA-TextFilterModes-\" + key.toString() + \"-MinImageDimension\"}>MinImageDimension</label>\r\n                                                    <input type=\"range\" onChange={this.updateRangeValue} min=\"65536\" max=\"2147483647\" step=\"1\" defaultValue=\"65536\" factor=\"1\" />\r\n                                                    <input data-id={\"SMA-TextFilterModes-\" + key.toString() + \"-MinImageDimension\"} onKeyUp={this.updateRange} type=\"knumber\" min=\"65536\" max=\"2147483647\" step=\"1\" defaultValue=\"65536\" factor=\"1\" />\r\n                                                </div>\r\n                                                <div>\r\n                                                    <label htmlFor={\"SMA-TextFilterModes-\" + key.toString() + \"-Sensitivity\"}>Sensitivity</label>\r\n                                                    <input type=\"range\" onChange={this.updateRangeValue} min=\"0\" max=\"9\" step=\"1\" defaultValue=\"0\" factor=\"1\" />\r\n                                                    <input data-id={\"SMA-TextFilterModes-\" + key.toString() + \"-Sensitivity\"} onKeyUp={this.updateRange} type=\"knumber\" min=\"0\" max=\"9\" step=\"1\" defaultValue=\"0\" factor=\"1\" />\r\n                                                </div>\r\n                                                <Button style={{ width: '45%', marginRight: '9%' }} variant=\"outline-success\" onClick={this.getModeArgument}>Get Current</Button>\r\n                                                <Button style={{ width: '45%' }} variant=\"outline-primary\" onClick={this.setModeArguments}>Submit </Button>\r\n                                            </Card>\r\n                                        </div>\r\n                                    )}\r\n                                </div>\r\n                            </Card>\r\n                            <Card style={{ padding: '1vw', marginTop: '1vw' }} id=\"div-runtimesettings-textureDetectionModes-container\" className=\"div-runtimesettings-mode-container\">\r\n                                <Card.Title style={{ width: '100%' }}>TextureDetectionModes</Card.Title>\r\n                                <div className=\"div-algsContainer\">\r\n                                    {this.props.runtimeSettings.furtherModes.textureDetectionModes.map((value, key) =>\r\n                                        <div key={this.messageKeyBase + 1500 + key}>\r\n                                            <select onChange={this.updateSettings} id={\"textureDetectionModes_\" + (key + 1).toString()} value={value}>\r\n                                                <option value=\"0\">Skip</option>\r\n                                                <option value=\"1\">Auto</option>\r\n                                                <option value=\"2\">GeneralWidthConcentration</option>\r\n                                            </select>\r\n                                            <Card className=\"div-runtimesettings-details-container paddingOneVW\" style={value === 2 ? style.show : style.hide}>\r\n                                                <div>\r\n                                                    <label htmlFor={\"SMA-TextureDetectionModes-\" + key.toString() + \"-Sensitivity\"}>Sensitivity</label>\r\n                                                    <input type=\"range\" onChange={this.updateRangeValue} min=\"1\" max=\"9\" step=\"1\" defaultValue=\"5\" factor=\"1\" />\r\n                                                    <input data-id={\"SMA-TextureDetectionModes-\" + key.toString() + \"-Sensitivity\"} onKeyUp={this.updateRange} type=\"knumber\" min=\"1\" max=\"9\" step=\"1\" defaultValue=\"5\" factor=\"1\" />\r\n                                                </div>\r\n                                                <Button style={{ width: '45%', marginRight: '9%' }} variant=\"outline-success\" onClick={this.getModeArgument}>Get Current</Button>\r\n                                                <Button style={{ width: '45%' }} variant=\"outline-primary\" onClick={this.setModeArguments}>Submit </Button>\r\n                                            </Card>\r\n                                        </div>\r\n                                    )}\r\n                                </div>\r\n                            </Card>\r\n                        </div >\r\n                    </div >\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"primary\" onClick={this.handleClose}>Close</Button>\r\n                </Modal.Footer>\r\n            </Modal >\r\n        );\r\n    }\r\n}\r\nconst style = {\r\n    hide: {\r\n        display: \"none\"\r\n    },\r\n    show: {\r\n        display: \"block\"\r\n    }\r\n}\r\nexport default SetUpUI;\r\n","\r\nimport DBR from \"../dbr\";\r\nimport React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Button } from 'react-bootstrap';\r\nimport DetailedResults from \"./DetailedResults\";\r\nimport SimpleResults from \"./SimpleResults\";\r\nimport StaticSettings from \"./StaticSettings\";\r\nimport SetUpUI from \"./SetUpUI\";\r\n\r\nclass BarcodeReader extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.reader = null;\r\n        this.state = {\r\n            // Status of lib\r\n            libLoaded: false,\r\n            bDecoding: false,\r\n            // Runtime settings in different forms for display\r\n            runtimeSettings: null,\r\n            runtimeSettingsString: \"\",\r\n            RTSUpdatedCount: 0,\r\n            // Data to show\r\n            imgData: null,\r\n            messages: [],\r\n            detailTitles: [],\r\n            detailContent: [],\r\n            // UI status\r\n            bShowModalDialog: false,\r\n            modalTitle: \"Unspecified\",\r\n            modeArgumentString: \"\",\r\n        };\r\n    }\r\n    async componentDidMount() {\r\n        if (DBR.BarcodeReader._bUseFullFeature !== this.props.fullFeature)\r\n            DBR.BarcodeReader._bUseFullFeature = this.props.fullFeature;\r\n        //Load the library on page load to speed things up.\r\n        try {\r\n            await DBR.BarcodeReader.loadWasm();\r\n            this.setState({ libLoaded: true });\r\n        } catch (ex) {\r\n            alert(ex.message);\r\n            throw ex;\r\n        }\r\n    }\r\n    componentWillUnmount() {\r\n        if (this.reader) {\r\n            this.reader.destroy();\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <>\r\n                {!this.state.libLoaded ?\r\n                    (<span style={{ fontSize: \"x-large\" }}>Loading Library...</span>)\r\n                    :\r\n                    (<>\r\n                        <Button className=\"narrow\" size=\"lg\" variant=\"secondary\" onClick={this.setUpRuntimeSettings}>Update Settings</Button>\r\n                        <Button className=\"narrow\" size=\"lg\" variant=\"secondary\" onClick={this.showStaticRuntimeSettings}>Show Settings</Button>\r\n                        <input onChange={this.onFileSelected} type=\"file\" multiple accept=\"image/png,image/jpeg,image/bmp,image/gif\" />\r\n                        {this.state.bDecoding || this.state.messages.length > 0 ?\r\n                            <SimpleResults\r\n                                bDecoding={this.state.bDecoding}\r\n                                imgData={this.state.imgData}\r\n                                messages={this.state.messages}\r\n                                showDetails={this.showDetails}\r\n                            ></SimpleResults> : \"\"}\r\n                    </>)\r\n                }\r\n                {(() => {\r\n                    if (this.state.bShowModalDialog)\r\n                        return (<div>{this.renderSwitch(this.state.modalTitle)}</div>);\r\n                })()}\r\n            </>\r\n        );\r\n    }\r\n    renderSwitch = (modalTile) => {\r\n        switch (modalTile) {\r\n            case 'Detailed Results':\r\n                return (\r\n                    <DetailedResults\r\n                        modalTitle={this.state.modalTitle}\r\n                        detailTitles={this.state.detailTitles}\r\n                        detailContent={this.state.detailContent}\r\n                        toggleHideModal={this.toggleHideModal}\r\n                    ></DetailedResults>\r\n                );\r\n            case 'Runtime Settings':\r\n                return (\r\n                    <StaticSettings\r\n                        fullFeature={this.props.fullFeature}\r\n                        modalTitle={this.state.modalTitle}\r\n                        runtimeSettings={this.state.runtimeSettings}\r\n                        runtimeSettingsString={this.state.runtimeSettingsString}\r\n                        RTSUpdatedCount={this.state.RTSUpdatedCount}\r\n                        updateRuntimeSettings={this.updateRuntimeSettings}\r\n                        toggleHideModal={this.toggleHideModal}\r\n                    ></StaticSettings>\r\n                );\r\n            case 'Set Up':\r\n                return (\r\n                    <SetUpUI\r\n                        RTSUpdatedCount={this.state.RTSUpdatedCount}\r\n                        fullFeature={this.props.fullFeature}\r\n                        modalTitle={this.state.modalTitle}\r\n                        runtimeSettings={this.state.runtimeSettings}\r\n                        updateRuntimeSettings={this.updateRuntimeSettings}\r\n                        getModeArgument={this.getModeArgument}\r\n                        setModeArgument={this.setModeArgument}\r\n                        toggleHideModal={this.toggleHideModal}\r\n                    ></SetUpUI>\r\n                );\r\n            default:\r\n                return \"\";\r\n        }\r\n    }\r\n    onFileSelected = event => {\r\n        // React can't get event.target in async func by default.\r\n        // Thus get event.target in sync part.\r\n        this.setImageData(null);\r\n        let input = event.target;\r\n        (async () => {\r\n            try {\r\n                this.emptyMessages();\r\n                this.appendAMessage(\"======== start read... ========\");\r\n                let startTime = (new Date()).getTime();\r\n                let reader = this.reader = this.reader || await DBR.BarcodeReader.createInstance();\r\n                reader.bSaveOriCanvas = true;\r\n                let files = input.files;\r\n                for (let file of files) {\r\n                    this.appendAMessage(file.name + ':')\r\n                    this.setDecodeState(true);\r\n                    let results = await reader.decode(file);\r\n                    let endTime = (new Date()).getTime();\r\n                    let timeElapsed = endTime - startTime;\r\n                    if (results.length === 0) {\r\n                        this.appendAMessage(\"No barcode found in \" + timeElapsed.toString() + \" milliseconds\");//, \"Caution!\");\r\n                    }\r\n                    else {\r\n                        this.appendAMessage(\"Reading done in \" + timeElapsed.toString() + \" milliseconds\");\r\n                        for (let i = 0; i < results.length; i++) {\r\n                            let result = results[i];\r\n                            this.appendAMessage(\"Result \" + (i + 1).toString() + \": \" + result.barcodeText);\r\n                            this.appendDetails(\"==================================\");\r\n                            this.appendDetails(\"-------------------------------------------------------\");\r\n                            this.appendDetails(\"Number \" + (i + 1).toString() + \" on file: \" + file.name);\r\n                            this.appendDetails(\"-------------------------------------------------------\");\r\n                            this.appendDetails(\"BarcodeFormat: \" + result.barcodeFormatString);\r\n                            this.appendDetails(\"BarcodeFormat_2: \" + result.barcodeFormatString_2);\r\n                            this.appendDetails(\"BarcodeText: \" + result.barcodeText);\r\n                            if (result.barcodeBytes !== null && result.barcodeBytes.length !== 0)\r\n                                this.appendDetails(\"Barcode Bytes (base64): \" + btoa(result.barcodeBytes));\r\n                            this.appendDetails(\"******************** Localization *********************\");\r\n                            let tempLocalizationResult = result.localizationResult;\r\n                            this.appendDetails(\"Terminated Phase: \" + tempLocalizationResult.terminatePhase);\r\n                            this.appendDetails(\"Format in Localization: \" + tempLocalizationResult.barcodeFormatString);\r\n                            this.appendDetails(\"Format in Localization2: \" + tempLocalizationResult.barcodeFormatString_2);\r\n                            this.appendDetails(\"Angle: \" + tempLocalizationResult.angle.toString());\r\n                            this.appendDetails(\"Module Size: \" + tempLocalizationResult.moduleSize.toString());\r\n                            this.appendDetails(\"Confidence: \" + tempLocalizationResult.confidence.toString());\r\n\r\n                            this.appendDetails(\"Document: \" + tempLocalizationResult.documentName);\r\n                            this.appendDetails(\"Page: \" + tempLocalizationResult.pageNumber.toString());\r\n                            if (tempLocalizationResult.regionName !== \"\")\r\n                                this.appendDetails(\"Region: \" + tempLocalizationResult.regionName.toString());\r\n                            let _type = tempLocalizationResult.resultCoordinateType === 1 ? \"<px>\" : \"<%>\";\r\n                            this.appendDetails(\"Location \" + _type + \": \");\r\n                            this.appendDetails(\" (\" + tempLocalizationResult.x1 + \", \" + tempLocalizationResult.y1 + \")\"\r\n                                + \" (\" + tempLocalizationResult.x2 + \", \" + tempLocalizationResult.y2 + \")\"\r\n                                + \" (\" + tempLocalizationResult.x3 + \", \" + tempLocalizationResult.y3 + \")\"\r\n                                + \" (\" + tempLocalizationResult.x4 + \", \" + tempLocalizationResult.y4 + \")\"\r\n                                , true);\r\n                            this.appendDetails(\"******************** Extended Info *********************\");\r\n                            let extendedResults = result.results;\r\n                            for (let k = 0; k < extendedResults.length; k++) {\r\n                                this.appendDetails(\"Extended Result Number: [\" + k.toString() + \"]\");\r\n                                if (extendedResults[k].bytes !== null && extendedResults[k].bytes.length !== 0)\r\n                                    this.appendDetails(\"Bytes (base64): \" + btoa(extendedResults[k].bytes));\r\n                                this.appendDetails(\"Clarity: \" + extendedResults[k].clarity.toString());\r\n                                this.appendDetails(\"Confidence: \" + extendedResults[k].confidence.toString());\r\n                                this.appendDetails(\"Deformation: \" + extendedResults[k].deformation.toString());\r\n                                this.appendDetails(\"Result Type: \" + extendedResults[k].resultType.toString());\r\n\r\n                                if (extendedResults[k].detailedResult)\r\n                                    this.appendDetails(\"Detailed Result Exists!\", true);\r\n\r\n                                this.appendDetails(\"******************** Detailed Info *********************\");\r\n                                switch (result.barcodeFormatString) {\r\n                                    case \"GS1_COMPOSITE\": break;\r\n                                    /*\r\n                                     * One D\r\n                                     */\r\n                                    case \"CODE_39\":\r\n                                    case \"CODE_128\":\r\n                                    case \"CODE_93\":\r\n                                    case \"CODABAR\":\r\n                                    case \"ITF\":\r\n                                    case \"EAN_13\":\r\n                                    case \"EAN_8\":\r\n                                    case \"UPC_A\":\r\n                                    case \"UPC_E\":\r\n                                    case \"INDUSTRIAL_25\":\r\n                                    case \"CODE_39_EXTENDED\":\r\n                                        let oneDCodeDetails = result.detailedResult;\r\n                                        this.appendDetails(\"Module Size: \" + oneDCodeDetails.moduleSize);\r\n                                        if (oneDCodeDetails.checkDigitBytes !== null && oneDCodeDetails.checkDigitBytes.length !== 0)\r\n                                            this.appendDetails(\"Check Digit Bytes: \" + oneDCodeDetails.checkDigitBytes.toString());\r\n                                        if (oneDCodeDetails.startCharsBytes !== null && oneDCodeDetails.startCharsBytes.length !== 0)\r\n                                            this.appendDetails(\"Start Chars Bytes: \" + oneDCodeDetails.startCharsBytes.toString());\r\n                                        if (oneDCodeDetails.stopCharsBytes !== null && oneDCodeDetails.stopCharsBytes.length !== 0)\r\n                                            this.appendDetails(\"Stop Chars Bytes: \" + oneDCodeDetails.stopCharsBytes.toString());\r\n                                        break;\r\n                                    /*\r\n                                     * DataBar\r\n                                     */\r\n                                    case \"GS1_DATABAR_OMNIDIRECTIONAL\":\r\n                                    case \"GS1_DATABAR_TRUNCATED\":\r\n                                    case \"GS1_DATABAR_STACKED\":\r\n                                    case \"GS1_DATABAR_STACKED_OMNIDIRECTIONAL\":\r\n                                    case \"GS1_DATABAR_EXPANDED\":\r\n                                    case \"GS1_DATABAR_EXPANDED_STACKED\":\r\n                                    case \"GS1_DATABAR_LIMITED\":\r\n                                        break;\r\n                                    case \"PATCHCODE\":\r\n                                        break;\r\n                                    case \"MICRO_PDF417\":\r\n                                        /*\r\n                                         * Postal Code\r\n                                         */\r\n                                        break;\r\n                                    case \"USPSINTELLIGENTMAIL\":\r\n                                    case \"POSTNET\":\r\n                                    case \"PLANET\":\r\n                                    case \"AUSTRALIANPOST\":\r\n                                    case \"UKROYALMAIL\":\r\n                                        break;\r\n                                    /*\r\n                                     * PDF417\r\n                                     */\r\n                                    case \"PDF417\":\r\n                                        let pDF417Details = result.detailedResult;\r\n                                        this.appendDetails(\"Module Size: \" + pDF417Details.moduleSize);\r\n                                        this.appendDetails(\"Columns: \" + pDF417Details.Columns);\r\n                                        this.appendDetails(\"Rows: \" + pDF417Details.rows);\r\n                                        this.appendDetails(\"Error Correction Level: \" + pDF417Details.errorCorrectionLevel);\r\n                                        break;\r\n                                    case \"QR_CODE\":\r\n                                        let qRCodeDetails = result.detailedResult;\r\n                                        this.appendDetails(\"Version: \" + qRCodeDetails.Version);\r\n                                        this.appendDetails(\"Model: \" + qRCodeDetails.Model);\r\n                                        this.appendDetails(\"moduleSize: \" + qRCodeDetails.moduleSize);\r\n                                        this.appendDetails(\"Rows: \" + qRCodeDetails.rows);\r\n                                        this.appendDetails(\"Error Correction Level: \" + qRCodeDetails.errorCorrectionLevel);\r\n                                        break;\r\n                                    case \"DATAMATRIX\":\r\n                                        let dataMatrixDetails = result.detailedResult;\r\n                                        this.appendDetails(\"Module Size: \" + dataMatrixDetails.moduleSize);\r\n                                        this.appendDetails(\"Columns: \" + dataMatrixDetails.columns);\r\n                                        this.appendDetails(\"Rows: \" + dataMatrixDetails.rows);\r\n                                        this.appendDetails(\"Data Region Number: \" + dataMatrixDetails.dataRegionNumber);\r\n                                        this.appendDetails(\"Data Region Columns: \" + dataMatrixDetails.dataRegionColumns);\r\n                                        this.appendDetails(\"Data Region Rows: \" + dataMatrixDetails.dataRegionRows);\r\n                                        break;\r\n                                    case \"AZTEC\":\r\n                                        let aztecDetails = result.detailedResult;\r\n                                        this.appendDetails(\"Module Size: \" + aztecDetails.moduleSize);\r\n                                        this.appendDetails(\"Columns: \" + aztecDetails.columns);\r\n                                        this.appendDetails(\"Rows: \" + aztecDetails.rows);\r\n                                        this.appendDetails(\"Layer Number: \" + aztecDetails.layerNumber);\r\n                                        break;\r\n                                    case \"MAXICODE\":\r\n                                    case \"MICRO_QR\":\r\n                                        break;\r\n                                    default: break;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                input.value = \"\";\r\n                this.setImageData(reader.oriCanvas.toDataURL('image/png'));\r\n                this.setDecodeState(false);\r\n                this.appendAMessage(\"======== finish read ========\");\r\n            } catch (ex) {\r\n                this.appendAMessage(ex.message);\r\n                console.error(ex);\r\n            }\r\n        })();\r\n    }\r\n    setDecodeState = bStart => {\r\n        this.setState({ bDecoding: bStart })\r\n    }\r\n    setImageData = data => {\r\n        this.setState({ imgData: data });\r\n    }\r\n    getModeArgument = async paras => {\r\n        let reader = this.reader = this.reader || await DBR.BarcodeReader.createInstance();\r\n        try {\r\n            if (paras && paras.length > 2) {\r\n                let _value = await reader.getModeArgument(paras[0], parseInt(paras[1]), paras[2]);\r\n                alert(JSON.stringify({\r\n                    modeName: paras[0],\r\n                    key: paras[1],\r\n                    argumentName: paras[2],\r\n                    value: _value\r\n                }));\r\n            }\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    }\r\n    setModeArgument = async paras => {\r\n        let reader = this.reader = this.reader || await DBR.BarcodeReader.createInstance();\r\n        try {\r\n            if (paras && paras.length > 2) {\r\n                await reader.setModeArgument(paras[0], parseInt(paras[1]), paras[2], paras[3]);\r\n            }\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    }\r\n    updateRuntimeSettings = async _rts => {\r\n        let reader = this.reader = this.reader || await DBR.BarcodeReader.createInstance();\r\n        try {\r\n            await reader.updateRuntimeSettings(_rts);\r\n            this.showCurrentSettings();\r\n        } catch (e) {\r\n            this.showCurrentSettings();\r\n        }\r\n    }\r\n    toggleHideModal = bShow => {\r\n        this.setState({ bShowModalDialog: bShow });\r\n    }\r\n    setUpRuntimeSettings = async () => {\r\n        this.reader = this.reader || await DBR.BarcodeReader.createInstance();\r\n        let _runtimeSettings = await this.reader.getRuntimeSettings();\r\n        this.setState(\r\n            { runtimeSettings: _runtimeSettings },\r\n            () => this.setState({\r\n                modalTitle: \"Set Up\",\r\n                bShowModalDialog: true\r\n            })\r\n        );\r\n        this.showCurrentSettings();\r\n    }\r\n    showCurrentSettings = async () => {\r\n        if (this.state.bShowModalDialog) {\r\n            let reader = this.reader = this.reader || await DBR.BarcodeReader.createInstance();\r\n            let _runtimeSettings = await reader.getRuntimeSettings();\r\n            let runtimeSettings_str = \"\";\r\n            if (this.props.fullFeature)\r\n                runtimeSettings_str = await reader.outputSettingsToString();\r\n            this.setState({\r\n                RTSUpdatedCount: this.state.RTSUpdatedCount + 1,\r\n                runtimeSettings: _runtimeSettings,\r\n                runtimeSettingsString: runtimeSettings_str\r\n            });\r\n        }\r\n    }\r\n    showStaticRuntimeSettings = () => {\r\n        this.setState({\r\n            modalTitle: \"Runtime Settings\",\r\n            bShowModalDialog: true\r\n        }, () => {\r\n            this.showCurrentSettings();\r\n        });\r\n    }\r\n    appendAMessage = str => {\r\n        this.setState(prevState => ({\r\n            messages: [...prevState.messages, str]\r\n        }));\r\n    }\r\n    emptyMessages = () => {\r\n        this.setState(prevState => ({\r\n            messages: [],\r\n            detailContent: [],\r\n            detailTitles: []\r\n        }));\r\n    }\r\n    appendDetails = (str, bImportant) => {\r\n        if (str.indexOf(\":\") !== -1) {\r\n            let _values = str.split(\":\");\r\n            this.setState(prevState => ({\r\n                detailTitles: [...prevState.detailTitles, _values[0] + \" : \"],\r\n                detailContent: [...prevState.detailContent, _values[1]]\r\n            }));\r\n        }\r\n        else if (bImportant) {\r\n            this.setState(prevState => ({\r\n                detailTitles: [...prevState.detailTitles, \"\"],\r\n                detailContent: [...prevState.detailContent, str]\r\n            }));\r\n        } else {\r\n            this.setState(prevState => ({\r\n                detailTitles: [...prevState.detailTitles, str],\r\n                detailContent: [...prevState.detailContent, \"\"]\r\n            }));\r\n        }\r\n    }\r\n    showDetails = () => {\r\n        this.setState(state => {\r\n            state.bShowModalDialog = true;\r\n            state.modalTitle = \"Detailed Results\";\r\n            return state;\r\n        });\r\n    }\r\n}\r\n\r\nexport default BarcodeReader;\r\n","import React from 'react';\r\nimport './ScannerUI.css';\r\n\r\nclass BarcodeScanner extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.elRef = React.createRef();\r\n    }\r\n    async componentDidMount() {\r\n        try {\r\n            this.props.scanner.setUIElement(this.elRef.current);\r\n            this.props.scanner.onFrameRead = results => {\r\n                for (let result of results) {\r\n                    this.props.appendMessage(result.barcodeFormatString + ': ' + result.barcodeText);\r\n                }\r\n            };\r\n            await this.props.scanner.open();\r\n        } catch (ex) {\r\n            this.props.appendMessage(ex.message);\r\n            console.error(ex);\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div ref={this.elRef} className=\"component-barcode-scanner\">\r\n                <svg className=\"dbrScanner-bg-loading\" viewBox=\"0 0 1792 1792\"><path d=\"M1760 896q0 176-68.5 336t-184 275.5-275.5 184-336 68.5-336-68.5-275.5-184-184-275.5-68.5-336q0-213 97-398.5t265-305.5 374-151v228q-221 45-366.5 221t-145.5 406q0 130 51 248.5t136.5 204 204 136.5 248.5 51 248.5-51 204-136.5 136.5-204 51-248.5q0-230-145.5-406t-366.5-221v-228q206 31 374 151t265 305.5 97 398.5z\"></path></svg>\r\n                <svg className=\"dbrScanner-bg-camera\" style={{ display: \"none\" }} viewBox=\"0 0 2048 1792\"><path d=\"M1024 672q119 0 203.5 84.5t84.5 203.5-84.5 203.5-203.5 84.5-203.5-84.5-84.5-203.5 84.5-203.5 203.5-84.5zm704-416q106 0 181 75t75 181v896q0 106-75 181t-181 75h-1408q-106 0-181-75t-75-181v-896q0-106 75-181t181-75h224l51-136q19-49 69.5-84.5t103.5-35.5h512q53 0 103.5 35.5t69.5 84.5l51 136h224zm-704 1152q185 0 316.5-131.5t131.5-316.5-131.5-316.5-316.5-131.5-316.5 131.5-131.5 316.5 131.5 316.5 316.5 131.5z\"></path></svg>\r\n                <video className=\"dbrScanner-video\" playsInline={true}></video>\r\n                <canvas className=\"dbrScanner-cvs-drawarea\"></canvas>\r\n                <div className=\"dbrScanner-cvs-scanarea\">\r\n                    <div className=\"dbrScanner-scanlight\" style={{ display: \"none\" }}></div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default BarcodeScanner;\r\n","import DBR from \"../dbr\";\r\nimport React from 'react';\r\nimport './BarcodeScanner.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Button } from 'react-bootstrap';\r\nimport ScannerUI from './ScannerUI'\r\nimport DetailedResults from \"./DetailedResults\";\r\nimport StaticSettings from \"./StaticSettings\";\r\nimport SetUpUI from \"./SetUpUI\";\r\n\r\nclass BarcodeScanner extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.bDestroyed = false;\r\n        this.scanner = null;\r\n        this.elRef = React.createRef();\r\n        this.state = {\r\n            bShowScanner: false,\r\n            libLoaded: false,\r\n            resultValue: \"\",\r\n            // Runtime settings in different forms for display\r\n            runtimeSettings: null,\r\n            runtimeSettingsString: \"\",\r\n            RTSUpdatedCount: 0,\r\n            // Data to show\r\n            imgData: null,\r\n            messages: [],\r\n            detailTitles: [],\r\n            detailContent: [],\r\n            // UI status\r\n            bShowModalDialog: false,\r\n            modalTitle: \"Unspecified\",\r\n            modeArgumentString: \"\",\r\n        };\r\n    }\r\n    async componentDidMount() {\r\n        if (DBR.BarcodeReader._bUseFullFeature !== this.props.fullFeature)\r\n            DBR.BarcodeReader._bUseFullFeature = this.props.fullFeature;\r\n        //Load the library on page load to speed things up.\r\n        try {\r\n            this.scanner = this.scanner || await DBR.BarcodeScanner.createInstance();\r\n            if (this.bDestroyed) {\r\n                this.scanner.destroy();\r\n                return;\r\n            }\r\n            this.setState({ libLoaded: true }, async _ => {\r\n                this.showScanner();\r\n            });\r\n        } catch (ex) {\r\n            alert(ex.message);\r\n            throw ex;\r\n        }\r\n    }\r\n    componentWillUnmount() {\r\n        this.bDestroyed = true;\r\n        if (this.scanner) {\r\n            this.scanner.destroy();\r\n        }\r\n    }\r\n    updateRuntimeSettings = async _rts => {\r\n        let scanner = this.scanner = this.scanner || await DBR.BarcodeReader.createInstance();\r\n        try {\r\n            await scanner.updateRuntimeSettings(_rts);\r\n            this.showCurrentSettings();\r\n        } catch (e) {\r\n            this.showCurrentSettings();\r\n        }\r\n    }\r\n    setUpRuntimeSettings = async () => {\r\n        this.scanner = this.scanner || await DBR.BarcodeScanner.createInstance();\r\n        let _runtimeSettings = await this.scanner.getRuntimeSettings();\r\n        this.setState(\r\n            { runtimeSettings: _runtimeSettings },\r\n            () => this.setState({\r\n                modalTitle: \"Set Up\",\r\n                bShowModalDialog: true\r\n            })\r\n        );\r\n        this.showCurrentSettings();\r\n    }\r\n    showCurrentSettings = async () => {\r\n        let scanner = this.scanner = this.scanner || await DBR.BarcodeScanner.createInstance();\r\n        let _runtimeSettings = await scanner.getRuntimeSettings();\r\n        let runtimeSettings_str = \"\";\r\n        if (this.props.fullFeature)\r\n            runtimeSettings_str = await scanner.outputSettingsToString();\r\n        this.setState({\r\n            RTSUpdatedCount: this.state.RTSUpdatedCount + 1,\r\n            runtimeSettings: _runtimeSettings,\r\n            runtimeSettingsString: runtimeSettings_str\r\n        });\r\n    }\r\n    showStaticRuntimeSettings = () => {\r\n        this.setState({\r\n            modalTitle: \"Runtime Settings\",\r\n            bShowModalDialog: true\r\n        }, () => {\r\n            this.showCurrentSettings();\r\n        });\r\n    }\r\n    showScanner = () => {\r\n        this.setState({\r\n            bShowScanner: true\r\n        });\r\n    }\r\n    hideScanner = () => {\r\n        this.setState({\r\n            bShowScanner: false\r\n        });\r\n    }\r\n    appendMessage = str => {\r\n        this.setState(state => {\r\n            state.resultValue = str;\r\n            return state;\r\n        });\r\n    }\r\n    render() {\r\n        return (\r\n            <div id=\"UIElement\">\r\n                {this.state.libLoaded && !this.state.bShowScanner ? <Button size=\"lg\" variant=\"outline-primary\" onClick={this.showScanner}>Start Barcode Scanner</Button> : \"\"}\r\n                {this.state.bShowScanner ? <Button className=\"narrow\" size=\"lg\" variant=\"secondary\" onClick={this.setUpRuntimeSettings}>Update Settings</Button> : \"\"}\r\n                {this.state.bShowScanner ? <Button className=\"narrow\" size=\"lg\" variant=\"secondary\" onClick={this.showStaticRuntimeSettings}>Show Settings</Button> : \"\"}\r\n                {this.state.libLoaded ? <input type=\"text\" value={this.state.resultValue} readOnly={true} className=\"latest-result\" placeholder=\"The Last Read Barcode\" /> : \"\"}\r\n                {!this.state.libLoaded ? (<span style={{ fontSize: \"x-large\" }}>Loading Library...</span>) : \"\"}\r\n                {this.state.bShowScanner ? (\r\n                    <ScannerUI\r\n                        scanner={this.scanner}\r\n                        fullFeature={this.props.fullFeature}\r\n                        runtimeSettings={this.state.runtimeSettings}\r\n                        runtimeSettingsString={this.state.runtimeSettingsString}\r\n                        RTSUpdatedCount={this.state.RTSUpdatedCount}\r\n                        appendMessage={this.appendMessage}>\r\n                    </ScannerUI>) : \"\"}\r\n                {(() => {\r\n                    if (this.state.bShowModalDialog)\r\n                        return (<div>{this.renderSwitch(this.state.modalTitle)}</div>);\r\n                })()}\r\n            </div>\r\n        );\r\n    }\r\n    toggleHideModal = bShow => {\r\n        this.setState({ bShowModalDialog: bShow });\r\n    }\r\n    renderSwitch = (modalTile) => {\r\n        switch (modalTile) {\r\n            case 'Detailed Results':\r\n                return (\r\n                    <DetailedResults\r\n                        modalTitle={this.state.modalTitle}\r\n                        detailTitles={this.state.detailTitles}\r\n                        detailContent={this.state.detailContent}\r\n                        toggleHideModal={this.toggleHideModal}\r\n                    ></DetailedResults>\r\n                );\r\n            case 'Runtime Settings':\r\n                return (\r\n                    <StaticSettings\r\n                        fullFeature={this.props.fullFeature}\r\n                        modalTitle={this.state.modalTitle}\r\n                        runtimeSettings={this.state.runtimeSettings}\r\n                        runtimeSettingsString={this.state.runtimeSettingsString}\r\n                        RTSUpdatedCount={this.state.RTSUpdatedCount}\r\n                        updateRuntimeSettings={this.updateRuntimeSettings}\r\n                        toggleHideModal={this.toggleHideModal}\r\n                    ></StaticSettings>\r\n                );\r\n            case 'Set Up':\r\n                return (\r\n                    <SetUpUI\r\n                        RTSUpdatedCount={this.state.RTSUpdatedCount}\r\n                        fullFeature={this.props.fullFeature}\r\n                        modalTitle={this.state.modalTitle}\r\n                        runtimeSettings={this.state.runtimeSettings}\r\n                        updateRuntimeSettings={this.updateRuntimeSettings}\r\n                        getModeArgument={this.getModeArgument}\r\n                        setModeArgument={this.setModeArgument}\r\n                        toggleHideModal={this.toggleHideModal}\r\n                    ></SetUpUI>\r\n                );\r\n            default:\r\n                return \"\";\r\n        }\r\n    }\r\n}\r\n\r\nexport default BarcodeScanner;\r\n","import './SettingsSample.css';\r\nimport React from 'react';\r\nimport BarcodeReader from './BarcodeReader';\r\nimport BarcodeScanner from './BarcodeScanner';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Badge, InputGroup, FormControl, Button } from 'react-bootstrap';\r\n\r\nclass SettingsSample extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            sampleStarted: false,\r\n            useAdvanced: false,\r\n            instanceType: \"\"\r\n        };\r\n    }\r\n    createAnInstance(type) {\r\n        this.setState({\r\n            sampleStarted: true\r\n        }, () => {\r\n            this.setState({ instanceType: type });\r\n        });\r\n    }\r\n    handleCheckBoxChange = evt => {\r\n        this.setState({ useAdvanced: evt.target.checked });\r\n    }\r\n    render() {\r\n        return (\r\n            <>\r\n                {!this.state.sampleStarted ?\r\n                    (<div className=\"settingsSample\">\r\n                        <h3><Badge variant=\"outline-primary\">{this.props.title}</Badge></h3>\r\n                        <InputGroup style={{ width: '40vw', minWidth: '250px' }} className=\"mb-3\">\r\n                            <InputGroup.Prepend>\r\n                                <InputGroup.Checkbox defaultChecked={false} onChange={this.handleCheckBoxChange} aria-label=\"Checkbox for following text input\" />\r\n                            </InputGroup.Prepend>\r\n                            <FormControl aria-label=\"Text input with checkbox\" defaultValue=\"Use Advanced Features\" readOnly />\r\n                        </InputGroup>\r\n                        <Button className=\"normal\" size=\"lg\" block variant=\"outline-primary\" onClick={() => { this.createAnInstance('reader') }}>Read File</Button>\r\n                        <Button className=\"normal\" size=\"lg\" block variant=\"outline-primary\" onClick={() => { this.createAnInstance('scanner') }}>Read Video</Button>\r\n                    </div>\r\n                    ) :\r\n                    (<div className=\"settingsSample\">\r\n                        {this.state.instanceType === \"reader\" ? <div className=\"tab-content\">\r\n                            <BarcodeReader\r\n                                fullFeature={this.state.useAdvanced}\r\n                            ></BarcodeReader>\r\n                        </div> : \"\"}\r\n                        {this.state.instanceType === \"scanner\" ? <div className=\"tab-content\">\r\n                            <BarcodeScanner\r\n                                fullFeature={this.state.useAdvanced}\r\n                            ></BarcodeScanner>\r\n                        </div> : \"\"}\r\n                    </div>\r\n                    )}\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SettingsSample;\r\n","import SettingsSample from './components/SettingsSample';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SettingsSample title=\"Barcode Reader Settings Sample\"></SettingsSample>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}