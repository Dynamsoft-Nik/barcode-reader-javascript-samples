{"version":3,"sources":["logo.svg","dbr.js","components/BarcodeScanner.js","components/HelloWorld.js","App.js","reportWebVitals.js","index.js"],"names":["DBR","BarcodeReader","engineResourcePath","organizationID","BarcodeScanner","props","bDestroyed","scanner","elRef","React","createRef","a","this","createInstance","destroy","setUIElement","current","onFrameRead","results","result","appendMessage","barcodeFormatString","barcodeText","open","message","console","error","ref","className","viewBox","d","style","display","playsInline","Component","HelloWorld","str","setState","state","resultValue","showScanner","bShowScanner","refDivMessage","libLoaded","loadWasm","alert","onClick","type","value","readOnly","placeholder","id","fontSize","App","src","reactLogo","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.521a00a6.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import DBR from \"dynamsoft-javascript-barcode\";\r\nDBR.BarcodeReader.engineResourcePath = \"https://cdn.jsdelivr.net/npm/dynamsoft-javascript-barcode@8.2.3/dist/\";\r\n// Please visit https://www.dynamsoft.com/customer/license/trialLicense to get a trial license\r\nDBR.BarcodeReader.organizationID = \"100448235\";\r\n// DBR.BarcodeReader.productKeys = \"t0077xQAAAEOf0RjyWar4Q48NrAu7iX4j+Ivl3iqpsR2Mf3W9gf/HMgalcntdpSMel3xw/Mze/z8dpY0eCdkvUxN6+brx+xrzZh4+AWkFKn4=\";\r\n// DBR.BarcodeReader._bUseFullFeature = true; // Control of loading min wasm or full wasm.\r\nexport default DBR;","import DBR from \"../dbr\";\r\nimport React from 'react';\r\nimport './BarcodeScanner.css';\r\n\r\nclass BarcodeScanner extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.bDestroyed = false;\r\n        this.scanner = null;\r\n        this.elRef = React.createRef();\r\n    }\r\n    async componentDidMount() {\r\n        try {\r\n            this.scanner = this.scanner || await DBR.BarcodeScanner.createInstance();\r\n\r\n            if (this.bDestroyed) {\r\n                this.scanner.destroy();\r\n                return;\r\n            }\r\n\r\n            this.scanner.setUIElement(this.elRef.current);\r\n            this.scanner.onFrameRead = results => {\r\n                for (let result of results) {\r\n                    this.props.appendMessage(result.barcodeFormatString + ': ' + result.barcodeText);\r\n                }\r\n            };\r\n            await this.scanner.open();\r\n\r\n        } catch (ex) {\r\n            this.props.appendMessage(ex.message);\r\n            console.error(ex);\r\n        }\r\n    }\r\n    componentWillUnmount() {\r\n        this.bDestroyed = true;\r\n        if (this.scanner) {\r\n            this.scanner.destroy();\r\n        }\r\n    }\r\n    shouldComponentUpdate() {\r\n        // Never update UI after mount, dbrjs sdk use native way to bind event, update will remove it.\r\n        return false;\r\n    }\r\n    render() {\r\n        return (\r\n            <div ref={this.elRef} className=\"component-barcode-scanner\">\r\n                <svg className=\"dbrScanner-bg-loading\" viewBox=\"0 0 1792 1792\"><path d=\"M1760 896q0 176-68.5 336t-184 275.5-275.5 184-336 68.5-336-68.5-275.5-184-184-275.5-68.5-336q0-213 97-398.5t265-305.5 374-151v228q-221 45-366.5 221t-145.5 406q0 130 51 248.5t136.5 204 204 136.5 248.5 51 248.5-51 204-136.5 136.5-204 51-248.5q0-230-145.5-406t-366.5-221v-228q206 31 374 151t265 305.5 97 398.5z\"></path></svg>\r\n                <svg className=\"dbrScanner-bg-camera\" style={{ display: \"none\" }} viewBox=\"0 0 2048 1792\"><path d=\"M1024 672q119 0 203.5 84.5t84.5 203.5-84.5 203.5-203.5 84.5-203.5-84.5-84.5-203.5 84.5-203.5 203.5-84.5zm704-416q106 0 181 75t75 181v896q0 106-75 181t-181 75h-1408q-106 0-181-75t-75-181v-896q0-106 75-181t181-75h224l51-136q19-49 69.5-84.5t103.5-35.5h512q53 0 103.5 35.5t69.5 84.5l51 136h224zm-704 1152q185 0 316.5-131.5t131.5-316.5-131.5-316.5-316.5-131.5-316.5 131.5-131.5 316.5 131.5 316.5 316.5 131.5z\"></path></svg>\r\n                <video className=\"dbrScanner-video\" playsInline={true}></video>\r\n                <canvas className=\"dbrScanner-cvs-drawarea\"></canvas>\r\n                <div className=\"dbrScanner-cvs-scanarea\">\r\n                    <div className=\"dbrScanner-scanlight\" style={{ display: \"none\" }}></div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default BarcodeScanner;\r\n","import './HelloWorld.css';\r\nimport DBR from \"../dbr\";\r\nimport React from 'react';\r\nimport BarcodeScanner from './BarcodeScanner';\r\n\r\nclass HelloWorld extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.refDivMessage = React.createRef();\r\n        this.state = {\r\n            libLoaded: false,\r\n            resultValue: \"\",\r\n            bShowScanner: false\r\n        };\r\n    }\r\n    async componentDidMount() {\r\n        try {\r\n            await DBR.BarcodeScanner.loadWasm();\r\n            this.setState(state => {\r\n                state.libLoaded = true;\r\n                return state;\r\n            });\r\n        } catch (ex) {\r\n            alert(ex.message);\r\n            throw ex;\r\n        }\r\n    }\r\n    appendMessage = str => {\r\n        this.setState(state => {\r\n            state.resultValue = str;\r\n            return state;\r\n        });\r\n    }\r\n    showScanner = () => {\r\n        this.setState({\r\n            bShowScanner: true\r\n        });\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"helloWorld\">\r\n                <h1>Dynamsoft Barcode Reader Hello World Sample for React</h1>\r\n                <button onClick={this.showScanner}>Start Barcode Scanner</button>\r\n                <input type=\"text\" value={this.state.resultValue} readOnly={true} className=\"latest-result\" placeholder=\"The Barcode Result\" />\r\n                <div id=\"UIElement\">\r\n                    {!this.state.libLoaded ? (<span style={{ fontSize: \"x-large\" }}>Loading Library...</span>) : \"\"}\r\n                    {this.state.bShowScanner ? (<BarcodeScanner appendMessage={this.appendMessage}></BarcodeScanner>) : \"\"}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default HelloWorld;\r\n","import './App.css';\nimport reactLogo from './logo.svg';\nimport HelloWorld from './components/HelloWorld.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div><img src={reactLogo} className=\"App-logo\" alt=\"logo\" /></div>\n      <HelloWorld></HelloWorld>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}