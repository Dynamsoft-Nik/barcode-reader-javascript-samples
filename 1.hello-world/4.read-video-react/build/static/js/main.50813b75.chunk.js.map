{"version":3,"sources":["logo.svg","dbr.js","components/BarcodeScanner.js","components/HelloWorld.js","App.js","reportWebVitals.js","index.js"],"names":["DBR","BarcodeReader","engineResourcePath","BarcodeScanner","props","bDestroyed","scanner","elRef","React","createRef","a","this","createInstance","destroy","setUIElement","current","onFrameRead","results","result","appendMessage","format","barcodeFormatString","text","barcodeText","type","indexOf","msg","exception","message","open","console","error","ref","className","viewBox","d","style","display","playsInline","Component","HelloWorld","scrollToBottom","refDivMessage","scrollTop","scrollHeight","setState","prevState","resultValue","resultItems","concat","showScanner","bShowScanner","state","libLoaded","loadWasm","alert","src","reactLogo","alt","value","readOnly","placeholder","id","fontSize","float","map","item","index","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.50813b75.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import DBR from \"dynamsoft-javascript-barcode\";\r\n\r\n/** LICENSE ALERT - README\r\n * The library requires a license to work, the APIs organizationID and handshakeCode specify how to acquire a license.\r\n * If nothing is specified, a 7-day (public) trial license will be used by default which is the case in this sample.\r\n * Note that network connection is required for this license acquisition to work.\r\n */\r\n\r\n/* When using your own license, please uncomment the following lines and fill in your own information. */\r\n/* For more information, please refer to https://www.dynamsoft.com/license-tracking/docs/about/licensefaq.html?ver=latest#how-to-use-a-trackable-license. */\r\n\r\n// DBR..BarcodeReader.organizationID = \"YOUR-ORGANIZATION-ID\";\r\n// DBR..BarcodeReader.handshakeCode = \"A-SPECIFIC-HANDSHAKECODE\";\r\n// DBR..BarcodeReader.sessionPassword = \"PASSWORD-TO-PROTECT-YOUR-LICENSE\"; // Important field to protect your license.\r\n// DBR..BarcodeReader.licenseServer = [\"YOUR-OWN-MAIN-LTS\", \"YOUR-OWN-STANDBY-LTS\"]; // Ignore this line if you are using Dynamsoft-hosting LTS\r\n\r\n/* The API \"productKeys\" is an alternative way to license the library, the major difference is that it does not require a network. Contact support@dynamsoft.com for more information. */\r\n\r\n// DBR..BarcodeReader.productKeys = \"YOUR-PRODUCT-KEY\";\r\n\r\n/** LICENSE ALERT - THE END */\r\n\r\nDBR.BarcodeReader.engineResourcePath = \"https://cdn.jsdelivr.net/npm/dynamsoft-javascript-barcode@8.2.3/dist/\";\r\n\r\n// DBR.BarcodeReader._bUseFullFeature = true; // Control of loading min wasm or full wasm.\r\n\r\nexport default DBR;","import DBR from \"../dbr\";\r\nimport React from 'react';\r\nimport './BarcodeScanner.css';\r\n\r\nclass BarcodeScanner extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.bDestroyed = false;\r\n        this.scanner = null;\r\n        this.elRef = React.createRef();\r\n    }\r\n    async componentDidMount() {\r\n        try {\r\n            this.scanner = this.scanner || await DBR.BarcodeScanner.createInstance();\r\n\r\n            if (this.bDestroyed) {\r\n                this.scanner.destroy();\r\n                return;\r\n            }\r\n            this.scanner.setUIElement(this.elRef.current);\r\n            this.scanner.onFrameRead = results => {\r\n                for (let result of results) {\r\n                    this.props.appendMessage({ format: result.barcodeFormatString, text: result.barcodeText, type: \"result\" });\r\n\r\n                    if (result.barcodeText.indexOf(\"Attention(exceptionCode\") !== -1) {\r\n                        this.props.appendMessage({ msg: result.exception.message, type: \"error\" });\r\n                    }\r\n                }\r\n            };\r\n            await this.scanner.open();\r\n        } catch (ex) {\r\n            this.props.appendMessage({ msg: ex.message, type: \"error\" });\r\n            console.error(ex);\r\n        }\r\n    }\r\n    componentWillUnmount() {\r\n        this.bDestroyed = true;\r\n        if (this.scanner) {\r\n            this.scanner.destroy();\r\n        }\r\n    }\r\n    shouldComponentUpdate() {\r\n        // Never update UI after mount, dbrjs sdk use native way to bind event, update will remove it.\r\n        return false;\r\n    }\r\n    render() {\r\n        return (\r\n            <div ref={this.elRef} className=\"component-barcode-scanner\">\r\n                <svg className=\"dbrScanner-bg-loading\" viewBox=\"0 0 1792 1792\"><path d=\"M1760 896q0 176-68.5 336t-184 275.5-275.5 184-336 68.5-336-68.5-275.5-184-184-275.5-68.5-336q0-213 97-398.5t265-305.5 374-151v228q-221 45-366.5 221t-145.5 406q0 130 51 248.5t136.5 204 204 136.5 248.5 51 248.5-51 204-136.5 136.5-204 51-248.5q0-230-145.5-406t-366.5-221v-228q206 31 374 151t265 305.5 97 398.5z\"></path></svg>\r\n                <svg className=\"dbrScanner-bg-camera\" style={{ display: \"none\" }} viewBox=\"0 0 2048 1792\"><path d=\"M1024 672q119 0 203.5 84.5t84.5 203.5-84.5 203.5-203.5 84.5-203.5-84.5-84.5-203.5 84.5-203.5 203.5-84.5zm704-416q106 0 181 75t75 181v896q0 106-75 181t-181 75h-1408q-106 0-181-75t-75-181v-896q0-106 75-181t181-75h224l51-136q19-49 69.5-84.5t103.5-35.5h512q53 0 103.5 35.5t69.5 84.5l51 136h224zm-704 1152q185 0 316.5-131.5t131.5-316.5-131.5-316.5-316.5-131.5-316.5 131.5-131.5 316.5 131.5 316.5 316.5 131.5z\"></path></svg>\r\n                <video className=\"dbrScanner-video\" playsInline={true}></video>\r\n                <canvas className=\"dbrScanner-cvs-drawarea\"></canvas>\r\n                <div className=\"dbrScanner-cvs-scanarea\">\r\n                    <div className=\"dbrScanner-scanlight\" style={{ display: \"none\" }}></div>\r\n                </div>\r\n                <div className=\"dbrScanner-poweredby\">Powered by Dynamsoft</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default BarcodeScanner;\r\n","import './HelloWorld.css';\r\nimport reactLogo from '../logo.svg';\r\nimport DBR from \"../dbr\";\r\nimport React from 'react';\r\nimport BarcodeScanner from './BarcodeScanner';\r\n\r\nclass HelloWorld extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.refDivMessage = React.createRef();\r\n        this.state = {\r\n            libLoaded: false,\r\n            resultValue: \"\",\r\n            resultItems: [],\r\n            bShowScanner: false\r\n        };\r\n    }\r\n    async componentDidMount() {\r\n        try {\r\n            await DBR.BarcodeScanner.loadWasm();\r\n            this.setState(state => {\r\n                state.libLoaded = true;\r\n                return state;\r\n            }, () => {\r\n                this.showScanner();\r\n            });\r\n        } catch (ex) {\r\n            alert(ex.message);\r\n            throw ex;\r\n        }\r\n    }\r\n\r\n    scrollToBottom = () => {\r\n        this.refDivMessage.current.scrollTop = this.refDivMessage.current.scrollHeight;\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.scrollToBottom();\r\n    }\r\n\r\n    appendMessage = (message) => {\r\n        switch (message.type) {\r\n            case \"result\":\r\n                this.setState(prevState => {\r\n                    prevState.resultValue = message.format + \": \" + message.text;\r\n                    prevState.resultItems = prevState.resultItems.concat([{ type: message.format + \": \", text: message.text }]);\r\n                    return prevState;\r\n                });\r\n                break;\r\n            case \"error\":\r\n                this.setState(prevState => {\r\n                    prevState.resultValue = \"Error Occurred! Check the error message in 'All results'!\";\r\n                    prevState.resultItems = prevState.resultItems.concat([{ type: \"Error: \", text: message.msg }]);\r\n                    return prevState;\r\n                });\r\n                break;\r\n            default: break;\r\n        }\r\n    }\r\n    showScanner = () => {\r\n        this.setState({\r\n            bShowScanner: true\r\n        });\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"helloWorld\">\r\n                <h2>Hello World for React<img src={reactLogo} className=\"App-logo\" alt=\"logo\" /></h2>\r\n                <input type=\"text\" value={this.state.resultValue} readOnly={true} className=\"latest-result\" placeholder=\"The Last Read Barcode\" />\r\n                <div id=\"UIElement\">\r\n                    {!this.state.libLoaded ? (<span style={{ fontSize: \"x-large\" }}>Loading Library...</span>) : \"\"}\r\n                    {this.state.bShowScanner ? (<BarcodeScanner appendMessage={this.appendMessage}></BarcodeScanner>) : \"\"}\r\n                </div>\r\n                <div>\r\n                    <span style={{ float: \"left\" }}>All Results:</span><br />\r\n                    <div id=\"results\" ref={this.refDivMessage}>\r\n                        <ul>\r\n                            {this.state.resultItems.map((item, index) => (\r\n                                <li key={100000 + index} ><span>{item.type}</span><span className=\"resultText\">{item.text}</span>                                </li>\r\n                            ))}\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default HelloWorld;\r\n","import './App.css';\nimport HelloWorld from './components/HelloWorld.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <HelloWorld></HelloWorld>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}